'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _AddressShapeWithValidation = require('./propTypes/AddressShapeWithValidation');

var _AddressShapeWithValidation2 = _interopRequireDefault(_AddressShapeWithValidation);

var _InputFieldContainer = require('./InputFieldContainer');

var _InputFieldContainer2 = _interopRequireDefault(_InputFieldContainer);

var _DefaultInput = require('./inputs/DefaultInput');

var _DefaultInput2 = _interopRequireDefault(_DefaultInput);

var _addressContainerContext = require('./addressContainerContext');

var _reactIntl = require('react-intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CountrySelector = function (_Component) {
  _inherits(CountrySelector, _Component);

  function CountrySelector() {
    var _temp, _this, _ret;

    _classCallCheck(this, CountrySelector);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleChangeCountry = function (changedFields) {
      var address = _this.props.address;


      if (changedFields.country.value === address.country.value) return;

      _this.props.onChangeAddress({
        country: { value: changedFields.country.value },
        city: { value: null },
        complement: { value: null },
        geoCoordinates: { value: [] },
        neighborhood: { value: null },
        number: { value: null },
        postalCode: { value: null },
        reference: { value: null },
        state: { value: null },
        street: { value: null }
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  CountrySelector.prototype.shouldComponentUpdate = function shouldComponentUpdate(prevProps) {
    if (prevProps.address.country.value !== this.props.address.country.value) {
      return true;
    }

    if (prevProps.Input !== this.props.Input) {
      return true;
    }

    if (prevProps.shipsTo !== this.props.shipsTo) {
      return true;
    }

    return false;
  };

  CountrySelector.prototype.sortOptionsByLabel = function sortOptionsByLabel(options) {
    return options.slice().sort(function (a, b) {
      return a.label.localeCompare(b.label);
    });
  };

  CountrySelector.prototype.render = function render() {
    var _props = this.props,
        address = _props.address,
        shipsTo = _props.shipsTo,
        Input = _props.Input,
        intl = _props.intl;

    var field = {
      name: 'country',
      label: 'country',
      optionsCaption: false,
      value: address.country.value
    };

    return _react2.default.createElement(_InputFieldContainer2.default, {
      intl: intl,
      Input: Input,
      field: field,
      rules: {},
      options: this.sortOptionsByLabel(shipsTo),
      address: address,
      onChangeAddress: this.handleChangeCountry
    });
  };

  return CountrySelector;
}(_react.Component);

CountrySelector.defaultProps = {
  Input: _DefaultInput2.default
};

CountrySelector.propTypes = process.env.NODE_ENV !== "production" ? {
  Input: _propTypes2.default.func,
  intl: _reactIntl.intlShape,
  address: _AddressShapeWithValidation2.default,
  shipsTo: _propTypes2.default.array.isRequired,
  onChangeAddress: _propTypes2.default.func.isRequired
} : {};

exports.default = (0, _addressContainerContext.injectAddressContext)((0, _reactIntl.injectIntl)(CountrySelector));
module.exports = exports['default'];
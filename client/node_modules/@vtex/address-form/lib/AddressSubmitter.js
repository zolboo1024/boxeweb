'use strict';

exports.__esModule = true;

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _recompose = require('recompose');

var _addressContainerContext = require('./addressContainerContext');

var _AddressShapeWithValidation = require('./propTypes/AddressShapeWithValidation');

var _AddressShapeWithValidation2 = _interopRequireDefault(_AddressShapeWithValidation);

var _validateAddress = require('./validateAddress');

var _address = require('./transforms/address');

var _addressRulesContext = require('./addressRulesContext');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AddressSubmitter = function (_Component) {
  _inherits(AddressSubmitter, _Component);

  function AddressSubmitter() {
    var _temp, _this, _ret;

    _classCallCheck(this, AddressSubmitter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleSubmit = function () {
      var _this$props = _this.props,
          address = _this$props.address,
          rules = _this$props.rules,
          onSubmit = _this$props.onSubmit,
          onChangeAddress = _this$props.onChangeAddress;

      var _isValidAddress = (0, _validateAddress.isValidAddress)(address, rules),
          valid = _isValidAddress.valid,
          validatedAddress = _isValidAddress.address;

      var invalidFields = Object.keys(validatedAddress).filter(function (key) {
        return validatedAddress[key].valid === false;
      }).reduce(function (filteredAddress, key) {
        filteredAddress[key] = validatedAddress[key];
        return filteredAddress;
      }, {});

      onChangeAddress(invalidFields);
      onSubmit(valid, (0, _address.removeValidation)(validatedAddress));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  AddressSubmitter.prototype.render = function render() {
    var children = this.props.children;

    return children(this.handleSubmit);
  };

  return AddressSubmitter;
}(_react.Component);

AddressSubmitter.propTypes = process.env.NODE_ENV !== "production" ? {
  onSubmit: _propTypes2.default.func.isRequired,
  rules: _propTypes2.default.object.isRequired,
  address: _AddressShapeWithValidation2.default,
  onChangeAddress: _propTypes2.default.func.isRequired,
  children: _propTypes2.default.func.isRequired
} : {};

var enhance = (0, _recompose.compose)(_addressContainerContext.injectAddressContext, _addressRulesContext.injectRules);
exports.default = enhance(AddressSubmitter);
module.exports = exports['default'];
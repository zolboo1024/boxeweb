'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = postalCodeAutoCompleteAddress;

var _postalCodeService = require('./postalCodeService');

var _address = require('./transforms/address');

var _flow = require('lodash/flow');

var _flow2 = _interopRequireDefault(_flow);

var _pickBy = require('lodash/pickBy');

var _pickBy2 = _interopRequireDefault(_pickBy);

var _isNil = require('lodash/isNil');

var _isNil2 = _interopRequireDefault(_isNil);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function postalCodeAutoCompleteAddress(_ref) {
  var cors = _ref.cors,
      accountName = _ref.accountName,
      address = _ref.address,
      rules = _ref.rules,
      callback = _ref.callback,
      _ref$shouldAddFocusTo = _ref.shouldAddFocusToNextInvalidField,
      shouldAddFocusToNextInvalidField = _ref$shouldAddFocusTo === undefined ? true : _ref$shouldAddFocusTo;

  (0, _postalCodeService.getAddress)({
    cors: cors,
    accountName: accountName,
    country: address.country.value,
    postalCode: address.postalCode.value
  }).then(function (responseAddress) {
    var functionsFlow = [function (fields) {
      return (0, _pickBy2.default)(fields, function (field) {
        return !(0, _isNil2.default)(field) && field !== '';
      });
    }, function (fields) {
      return (0, _address.addValidation)(fields, address);
    }, function (fields) {
      return (0, _address.handleMultipleValues)(fields);
    }, function (fields) {
      return (0, _address.maskFields)(fields, rules);
    }, function (fields) {
      return (0, _address.addNewField)(fields, 'postalCodeAutoCompleted', true);
    }, function (fields) {
      return (0, _address.addDisabledToProtectedFields)(fields, rules);
    }, removePostalCodeLoading].concat(shouldAddFocusToNextInvalidField ? [function (fields) {
      return (0, _address.addFocusToNextInvalidField)(fields, rules);
    }] : []);

    var autoCompletedFields = (0, _flow2.default)(functionsFlow)(responseAddress);

    var newAddressWithAutocompletedFields = (0, _address.newAddress)(autoCompletedFields);

    callback(newAddressWithAutocompletedFields);
  }).catch(function () {
    var newFields = removePostalCodeLoading(address);
    newFields = (0, _address.addFocusToNextInvalidField)(newFields, rules);
    callback(newFields);
  }).catch(
  /* istanbul ignore next */function (error) {
    // If the Jest test case that tests the catch() above fails,
    // the promise will catch the error and go to this branch
    // of the code. This console error makes the Jest error visible.
    console.error(error);
  });

  return addPostalCodeLoading(address);
}

function addPostalCodeLoading(address) {
  return _extends({}, address, {
    postalCode: _extends({}, address.postalCode, {
      loading: true
    })
  });
}

function removePostalCodeLoading(address) {
  return _extends({}, address, {
    postalCode: _extends({}, address.postalCode, {
      loading: undefined,
      valid: true
    })
  });
}
module.exports = exports['default'];
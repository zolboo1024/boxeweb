'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.isValidAddress = isValidAddress;
exports.validateAddress = validateAddress;
exports.validateChangedFields = validateChangedFields;
exports.validateField = validateField;

var _reduce = require('lodash/reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _find = require('lodash/find');

var _find2 = _interopRequireDefault(_find);

var _fields = require('./selectors/fields');

var _address = require('./transforms/address');

var _constants = require('./constants.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isValidAddress(address, rules) {
  var validatedAddress = (0, _address.addFocusToNextInvalidField)(address, rules);
  var hasInvalidField = (0, _find2.default)(validatedAddress, function (field) {
    return field.valid === false;
  });

  return {
    valid: !hasInvalidField,
    address: validatedAddress
  };
}

function validateAddress(address, rules) {
  return (0, _reduce2.default)(address, function (memo, _ref, name) {
    var value = _ref.value,
        valueOptions = _ref.valueOptions;

    memo[name] = _extends({
      value: value,
      valueOptions: valueOptions
    }, validateField(value, name, address, rules));
    return memo;
  }, {});
}

function validateChangedFields(changedFields, address, rules) {
  var changeFieldsNames = Object.keys(changedFields);
  var visitedFields = (0, _reduce2.default)(changedFields, function (acc, field, name) {
    return field.visited ? acc.concat([name]) : acc;
  }, []);

  var newAddress = _extends({}, address, changedFields);

  return (0, _reduce2.default)(changeFieldsNames, function (resultAddress, fieldName) {
    var validationResult = validateField(resultAddress[fieldName].value, fieldName, resultAddress, rules);

    var isVisited = visitedFields.indexOf(fieldName) !== -1;

    var becameValid = (!address[fieldName] || address[fieldName].valid !== true) && validationResult.valid === true;

    var keptValid = address[fieldName] && address[fieldName].valid === true && validationResult.valid === true;

    var becameInvalid = address[fieldName] && address[fieldName].valid === true && validationResult.valid === false;

    var showValidationResult = isVisited || !isVisited && (becameValid || becameInvalid || keptValid);

    resultAddress[fieldName] = _extends({}, resultAddress[fieldName], showValidationResult ? validationResult : {});
    return resultAddress;
  }, newAddress);
}

function validateField(value, name, address, rules) {
  switch (name) {
    case 'addressId':
      return validateAddressId(value, name, address, rules);
    case 'addressType':
      return validateAddressType(value, name, address, rules);
    case 'country':
      return validateCountry(value, name, address, rules);
    case 'geoCoordinates':
      return validateGeoCoordinates(value, name, address, rules);
    case 'postalCode':
      return validatePostalCode(value, name, address, rules);
    case 'city':
    case 'complement':
    case 'neighborhood':
    case 'number':
    case 'receiverName':
    case 'reference':
    case 'state':
    case 'street':
    case 'addressQuery':
    case 'isDisposable':
      return defaultValidation(value, name, address, rules);
    default:
      console.warn('Unexpected field ' + name);
  }
}

var validResult = { valid: true, reason: undefined };
var invalidAddressType = { valid: false, reason: _constants.EADDRESSTYPE };
var emptyField = { valid: false, reason: _constants.EEMPTY };
var notAnOption = { valid: false, reason: _constants.ENOTOPTION };
var invalidCountry = { valid: false, reason: _constants.ECOUNTRY };
var invalidGeoCoords = { valid: false, reason: _constants.EGEOCOORDS };
var invalidPostalCode = { valid: false, reason: _constants.EPOSTALCODE };

function valueInOptions(value, options) {
  var normalizedValue = value.toLowerCase();
  var normalizedOptions = options.map(function (option) {
    return option.toLowerCase();
  });
  return normalizedOptions.indexOf(normalizedValue) !== -1;
}

function valueInOptionsPairs(value, optionsPairs) {
  return (0, _find2.default)(optionsPairs, function (optionPair) {
    return optionPair.value.toLowerCase() === value.toLowerCase();
  }) || false;
}

function valueInOptionsMap(value, field, address, rules) {
  var options = (0, _fields.getListOfOptions)(field, address, rules);

  return options && options.length > 0 && (_typeof(options[0]) === 'object' ? valueInOptionsPairs(value, options) : valueInOptions(value, options));
}

function validateOptions(value, field, address, rules) {
  if (field.options) {
    return valueInOptions(value, field.options) ? validResult : notAnOption;
  }

  if (field.optionsPairs) {
    return valueInOptionsPairs(value, field.optionsPairs) ? validResult : notAnOption;
  }

  return valueInOptionsMap(value, field, address, rules) ? validResult : notAnOption;
}

function defaultValidation(value, name, address, rules) {
  var field = (0, _fields.getField)(name, rules);

  if (field && !value && field.required) {
    return emptyField;
  }

  if (field && (0, _fields.hasOptions)(field)) {
    return validateOptions(value, field, address, rules);
  }

  return validResult;
}

function validateAddressId(value, name, address, rules) {
  return value ? validResult : emptyField;
}

var validAddressTypes = ['residential', 'inStore', 'commercial', 'giftRegistry'];

function validateAddressType(value, name, address, rules) {
  return validAddressTypes.indexOf(value) !== -1 ? validResult : invalidAddressType;
}

function validateCountry(value, name, address, rules) {
  if (!value) {
    return emptyField;
  }

  if (value.length !== 3) {
    return invalidCountry;
  }

  return validResult;
}

function validateGeoCoordinates(value, name, address, rules) {
  return value && (value.length === 0 || value.length === 2) ? validResult : invalidGeoCoords;
}

function validatePostalCode(value, name, address, rules) {
  var field = (0, _fields.getField)(name, rules);

  if (!field) return validResult;

  if (field.required && !value) return emptyField;

  // we check if the value is truthy because
  // a not-required empty postal code should be valid
  if (field.regex && value) {
    var regExp = new RegExp(field.regex);
    if (regExp.test(value) === false) {
      return invalidPostalCode;
    }
  }

  return validResult;
}
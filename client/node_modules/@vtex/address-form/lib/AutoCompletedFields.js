'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _AddressShapeWithValidation = require('./propTypes/AddressShapeWithValidation');

var _AddressShapeWithValidation2 = _interopRequireDefault(_AddressShapeWithValidation);

var _AddressSummary = require('./AddressSummary');

var _AddressSummary2 = _interopRequireDefault(_AddressSummary);

var _address = require('./transforms/address');

var _pickBy = require('lodash/pickBy');

var _pickBy2 = _interopRequireDefault(_pickBy);

var _find = require('lodash/find');

var _find2 = _interopRequireDefault(_find);

var _flow = require('lodash/flow');

var _flow2 = _interopRequireDefault(_flow);

var _addressRulesContext = require('./addressRulesContext');

var _addressContainerContext = require('./addressContainerContext');

var _recompose = require('recompose');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IRRELEVANT_FIELDS = ['country', 'geoCoordinates'];

var removeAutoCompletedFields = (0, _flow2.default)([function (address) {
  return (0, _address.removeField)(address, 'postalCodeAutoCompleted');
}, function (address) {
  return (0, _address.removeField)(address, 'geolocationAutoCompleted');
}]);

var AutoCompletedFields = function (_Component) {
  _inherits(AutoCompletedFields, _Component);

  function AutoCompletedFields() {
    var _temp, _this, _ret;

    _classCallCheck(this, AutoCompletedFields);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleClickChange = function (e) {
      e.preventDefault();
      var _this$props = _this.props,
          address = _this$props.address,
          onChangeAddress = _this$props.onChangeAddress;


      onChangeAddress(removeAutoCompletedFields(address));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  AutoCompletedFields.prototype.filterRelevantFields = function filterRelevantFields(address) {
    return (0, _pickBy2.default)(address, function (field, name) {
      var autoCompleted = field.postalCodeAutoCompleted || field.geolocationAutoCompleted;

      var postalCodeGeolocationAutoCompleted = name !== 'postalCode' || name === 'postalCode' && field.geolocationAutoCompleted;

      var isRelevantField = IRRELEVANT_FIELDS.indexOf(name) === -1;
      var hasValue = address[name].value && address[name].value.length > 0;
      return autoCompleted && hasValue && postalCodeGeolocationAutoCompleted && isRelevantField;
    });
  };

  AutoCompletedFields.prototype.isEmpty = function isEmpty(address) {
    return Object.keys(address).length === 0;
  };

  AutoCompletedFields.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        address = _props.address,
        rules = _props.rules,
        children = _props.children;


    var filteredAddress = this.filterRelevantFields(address);

    if (this.isEmpty(filteredAddress)) {
      return null;
    }

    return _react2.default.createElement(
      _AddressSummary2.default,
      {
        canEditData: true,
        showCountry: false,
        address: _extends({}, (0, _address.removeValidation)(filteredAddress), {
          addressId: '',
          addressType: 'residential'
        }),
        rules: rules
      },
      _react2.default.createElement(
        'span',
        null,
        ' - '
      ),
      _react2.default.Children.map(children, function (child) {
        return _react2.default.cloneElement(child, {
          onClick: _this2.handleClickChange
        });
      })
    );
  };

  return AutoCompletedFields;
}(_react.Component);

AutoCompletedFields.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _propTypes2.default.node.isRequired,
  address: _AddressShapeWithValidation2.default,
  rules: _propTypes2.default.object.isRequired,
  onChangeAddress: _propTypes2.default.func.isRequired
} : {};

var enhance = (0, _recompose.compose)(_addressContainerContext.injectAddressContext, _addressRulesContext.injectRules);
exports.default = enhance(AutoCompletedFields);
module.exports = exports['default'];
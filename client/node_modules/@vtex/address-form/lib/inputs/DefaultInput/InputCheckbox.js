'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _AddressShapeWithValidation = require('../../propTypes/AddressShapeWithValidation');

var _AddressShapeWithValidation2 = _interopRequireDefault(_AddressShapeWithValidation);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InputCheckbox = function (_Component) {
  _inherits(InputCheckbox, _Component);

  function InputCheckbox() {
    var _temp, _this, _ret;

    _classCallCheck(this, InputCheckbox);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleChange = function (e) {
      _this.props.onChange(e.target.value);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  InputCheckbox.prototype.render = function render() {
    var _props = this.props,
        address = _props.address,
        field = _props.field,
        placeholder = _props.placeholder,
        onFocus = _props.onFocus,
        onBlur = _props.onBlur;


    var checked = address[field.name].disabled && !!address[field.name].value && address[field.name].valid;
    var id = this.props.id.replace('{{fieldName}}', field.name);
    var className = (0, _classnames2.default)('input', 'ship-checkboxNumberLabel', {
      required: field.required,
      hide: field.hidden,
      text: false,
      type: 'checkbox'
    });

    return _react2.default.createElement('input', {
      id: id,
      type: 'checkbox',
      name: field.elementName || field.name,
      defaultChecked: checked,
      checked: checked,
      placeholder: placeholder,
      onBlur: onBlur,
      onFocus: onFocus,
      onChange: this.handleChange,
      className: className
    });
  };

  return InputCheckbox;
}(_react.Component);

InputCheckbox.defaultProps = {
  id: 'ship-{{fieldName}}',
  type: 'text',
  className: '',
  disabled: false,
  autoFocus: false
};

InputCheckbox.propTypes = process.env.NODE_ENV !== "production" ? {
  field: _propTypes2.default.object.isRequired,
  address: _AddressShapeWithValidation2.default,
  onChange: _propTypes2.default.func,
  onBlur: _propTypes2.default.func.isRequired,
  id: _propTypes2.default.string,
  className: _propTypes2.default.string,
  placeholder: _propTypes2.default.string,
  onFocus: _propTypes2.default.func
} : {};

exports.default = InputCheckbox;
module.exports = exports['default'];
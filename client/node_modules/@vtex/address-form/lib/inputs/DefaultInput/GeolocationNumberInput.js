'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _AddressShapeWithValidation = require('../../propTypes/AddressShapeWithValidation');

var _AddressShapeWithValidation2 = _interopRequireDefault(_AddressShapeWithValidation);

var _addressRulesContext = require('../../addressRulesContext');

var _recompose = require('recompose');

var _addressContainerContext = require('../../addressContainerContext');

var _reactIntl = require('react-intl');

var _InputText = require('./InputText');

var _InputText2 = _interopRequireDefault(_InputText);

var _InputLabel = require('./InputLabel');

var _InputLabel2 = _interopRequireDefault(_InputLabel);

var _InputCheckbox = require('./InputCheckbox');

var _InputCheckbox2 = _interopRequireDefault(_InputCheckbox);

var _InputError = require('./InputError');

var _InputError2 = _interopRequireDefault(_InputError);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GeolocationNumberInput = function (_Component) {
  _inherits(GeolocationNumberInput, _Component);

  function GeolocationNumberInput() {
    _classCallCheck(this, GeolocationNumberInput);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  GeolocationNumberInput.prototype.render = function render() {
    var _props = this.props,
        field = _props.field,
        address = _props.address,
        autoFocus = _props.autoFocus,
        inputRef = _props.inputRef,
        intl = _props.intl,
        disabled = _props.disabled,
        onBlur = _props.onBlur,
        onFocus = _props.onFocus,
        handleToggle = _props.handleToggle,
        onChangeAddress = _props.onChangeAddress;


    var className = (0, _classnames2.default)('input', 'ship-notApplicable', {
      required: field.required,
      hide: field.hidden,
      text: true // That's a bug in the Checkout's CSS
    });

    var value = address[field.name].value;
    var valid = address[field.name].valid;

    return _react2.default.createElement(
      'div',
      { className: className, htmlFor: 'ship-' + field.name },
      _react2.default.createElement(
        _InputLabel2.default,
        { field: field },
        _react2.default.createElement(_InputText2.default, {
          field: field,
          address: address,
          autoFocus: autoFocus,
          onChange: onChangeAddress,
          placeholder: !field.hidden && !field.required ? intl.formatMessage({ id: 'address-form.optional' }) : null,
          onBlur: onBlur,
          disabled: disabled,
          inputRef: inputRef,
          value: value,
          onFocus: onFocus
        }),
        valid === false ? _react2.default.createElement(_InputError2.default, { reason: address[field.name].reason }) : null
      ),
      _react2.default.createElement(
        _InputLabel2.default,
        { field: { name: 'checkboxNumberLabel', label: 'noNumber' } },
        _react2.default.createElement(_InputCheckbox2.default, {
          address: address,
          field: field,
          placeholder: !field.hidden && !field.required ? intl.formatMessage({ id: 'address-form.optional' }) : null,
          onFocus: onFocus,
          onBlur: onBlur,
          onChange: handleToggle
        })
      )
    );
  };

  return GeolocationNumberInput;
}(_react.Component);

GeolocationNumberInput.propTypes = process.env.NODE_ENV !== "production" ? {
  address: _AddressShapeWithValidation2.default,
  field: _propTypes2.default.object,
  intl: _reactIntl.intlShape,
  onChangeAddress: _propTypes2.default.func.isRequired,
  autoFocus: _propTypes2.default.bool,
  options: _propTypes2.default.array,
  onBlur: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  inputRef: _propTypes2.default.func,
  shouldShowNumberKeyboard: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  handleToggle: _propTypes2.default.func
} : {};

var enhance = (0, _recompose.compose)(_addressContainerContext.injectAddressContext, _addressRulesContext.injectRules, _reactIntl.injectIntl);

exports.default = enhance(GeolocationNumberInput);
module.exports = exports['default'];
'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _AddressShapeWithValidation = require('../../propTypes/AddressShapeWithValidation');

var _AddressShapeWithValidation2 = _interopRequireDefault(_AddressShapeWithValidation);

var _InputSelect = require('./InputSelect');

var _InputSelect2 = _interopRequireDefault(_InputSelect);

var _InputText = require('./InputText');

var _InputText2 = _interopRequireDefault(_InputText);

var _InputLabel = require('./InputLabel');

var _InputLabel2 = _interopRequireDefault(_InputLabel);

var _InputError = require('./InputError');

var _InputError2 = _interopRequireDefault(_InputError);

var _PostalCodeLoader = require('../../postalCodeFrom/PostalCodeLoader');

var _PostalCodeLoader2 = _interopRequireDefault(_PostalCodeLoader);

var _reactIntl = require('react-intl');

var _GeolocationNumberInput = require('./GeolocationNumberInput');

var _GeolocationNumberInput2 = _interopRequireDefault(_GeolocationNumberInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Input = function (_Component) {
  _inherits(Input, _Component);

  function Input(props) {
    _classCallCheck(this, Input);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.handleChange = function (e) {
      _this.setState({ showErrorMessage: false });
      _this.props.onChange && _this.props.onChange(e);
    };

    _this.handleFocus = function (e) {
      _this.setState({ showErrorMessage: false });
      _this.props.onFocus && _this.props.onFocus(e);
    };

    _this.handleBlur = function (e) {
      _this.setState({ showErrorMessage: true });
      _this.props.onBlur && _this.props.onBlur(e);
    };

    _this.state = {
      showErrorMessage: false
    };
    return _this;
  }

  Input.prototype.render = function render() {
    var _props = this.props,
        field = _props.field,
        options = _props.options,
        address = _props.address,
        autoFocus = _props.autoFocus,
        inputRef = _props.inputRef,
        intl = _props.intl,
        shouldShowNumberKeyboard = _props.shouldShowNumberKeyboard,
        onFocus = _props.onFocus,
        toggleNotApplicable = _props.toggleNotApplicable,
        onChange = _props.onChange,
        onBlur = _props.onBlur;


    var loading = !!address[field.name].loading;
    var disabled = !!address[field.name].disabled;
    var valid = address[field.name].valid;
    var notApplicable = !!address[field.name].notApplicable;
    var noNumberValue = !address['number'].value && field.name === 'number';
    var hiddenNumber = field.hidden;
    var queryAndNotApplicableCondition = address['addressQuery'] && address['addressQuery'].geolocationAutoCompleted && noNumberValue || notApplicable;
    var geolocationCondition = queryAndNotApplicableCondition && !hiddenNumber;

    if (geolocationCondition) {
      var handleToggle = toggleNotApplicable;

      return _react2.default.createElement(_GeolocationNumberInput2.default, {
        field: field,
        address: address,
        autoFocus: autoFocus,
        inputRef: inputRef,
        intl: intl,
        disabled: disabled,
        onBlur: onBlur,
        onFocus: onFocus,
        handleToggle: handleToggle,
        onChangeAddress: onChange
      });
    }

    if (field.name === 'postalCode') {
      return _react2.default.createElement(
        _InputLabel2.default,
        { field: field },
        _react2.default.createElement(_InputText2.default, {
          field: field,
          className: loading ? 'loading-postal-code' : null,
          address: address,
          autoFocus: autoFocus,
          onChange: this.handleChange,
          onBlur: this.handleBlur,
          disabled: loading,
          inputRef: inputRef,
          type: shouldShowNumberKeyboard ? 'tel' : 'text',
          onFocus: this.handleFocus
        }),
        loading && _react2.default.createElement(_PostalCodeLoader2.default, null),
        field.forgottenURL && _react2.default.createElement(
          'small',
          null,
          _react2.default.createElement(
            'a',
            { href: field.forgottenURL, target: '_blank' },
            intl.formatMessage({ id: 'address-form.dontKnowPostalCode' })
          )
        ),
        valid === false && this.state.showErrorMessage ? _react2.default.createElement(_InputError2.default, { reason: address[field.name].reason }) : null
      );
    }

    if (field.name === 'addressQuery') {
      return _react2.default.createElement(
        _InputLabel2.default,
        { field: field },
        _react2.default.createElement(_InputText2.default, {
          field: field,
          className: loading ? 'loading-postal-code' : null,
          address: address,
          autoFocus: autoFocus,
          placeholder: intl.formatMessage({
            id: 'address-form.geolocation.example.' + address.country.value,
            defaultMessage: intl.formatMessage({
              id: 'address-form.geolocation.example.UNI'
            })
          }),
          onChange: this.handleChange,
          onBlur: this.handleBlur,
          disabled: loading,
          inputRef: inputRef,
          onFocus: this.handleFocus
        }),
        loading && _react2.default.createElement(_PostalCodeLoader2.default, null),
        valid === false && this.state.showErrorMessage ? _react2.default.createElement(_InputError2.default, { reason: address[field.name].reason }) : null
      );
    }

    return _react2.default.createElement(
      _InputLabel2.default,
      { field: field },
      options ? _react2.default.createElement(_InputSelect2.default, {
        field: field,
        options: options,
        address: address,
        onChange: this.handleChange,
        onBlur: this.handleBlur,
        disabled: loading,
        inputRef: inputRef,
        onFocus: this.handleFocus
      }) : _react2.default.createElement(_InputText2.default, {
        field: field,
        address: address,
        autoFocus: autoFocus,
        onChange: this.handleChange,
        placeholder: !field.hidden && !field.required ? intl.formatMessage({ id: 'address-form.optional' }) : null,
        onBlur: this.handleBlur,
        disabled: loading,
        inputRef: inputRef,
        onFocus: this.handleFocus
      }),
      valid === false && this.state.showErrorMessage ? _react2.default.createElement(_InputError2.default, { reason: address[field.name].reason }) : null
    );
  };

  return Input;
}(_react.Component);

Input.defaultProps = {
  inputRef: function inputRef() {},
  onBlur: function onBlur() {},
  autoFocus: false
};

Input.propTypes = process.env.NODE_ENV !== "production" ? {
  field: _propTypes2.default.object.isRequired,
  autoFocus: _propTypes2.default.bool,
  options: _propTypes2.default.array,
  address: _AddressShapeWithValidation2.default,
  onChange: _propTypes2.default.func.isRequired,
  onBlur: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  inputRef: _propTypes2.default.func,
  intl: _reactIntl.intlShape,
  shouldShowNumberKeyboard: _propTypes2.default.bool,
  toggleNotApplicable: _propTypes2.default.func
} : {};

exports.default = (0, _reactIntl.injectIntl)(Input);
module.exports = exports['default'];
'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _AddressShapeWithValidation = require('../../propTypes/AddressShapeWithValidation');

var _AddressShapeWithValidation2 = _interopRequireDefault(_AddressShapeWithValidation);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InputText = function (_Component) {
  _inherits(InputText, _Component);

  function InputText() {
    var _temp, _this, _ret;

    _classCallCheck(this, InputText);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleChange = function (e) {
      _this.props.onChange(e.target.value);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  InputText.prototype.render = function render() {
    var _cx;

    var _props = this.props,
        address = _props.address,
        field = _props.field,
        disabled = _props.disabled,
        inputRef = _props.inputRef,
        placeholder = _props.placeholder,
        type = _props.type,
        autoFocus = _props.autoFocus,
        onFocus = _props.onFocus;


    var id = this.props.id.replace('{{fieldName}}', field.name);
    var fieldValue = address[field.name];
    var loading = !!address[field.name].loading;

    var className = (0, _classnames2.default)(this.props.className, (_cx = {}, _cx['input-' + field.size] = field.size, _cx.success = !loading && fieldValue.valid === true, _cx.error = fieldValue.valid === false, _cx));

    return _react2.default.createElement('input', {
      autoFocus: autoFocus,
      autoComplete: field.autoComplete || 'on',
      id: id,
      type: type,
      name: field.elementName || field.name,
      maxLength: field.maxLength,
      value: fieldValue.value || '',
      placeholder: placeholder,
      onBlur: this.props.onBlur,
      onFocus: onFocus,
      onChange: this.handleChange,
      className: className,
      disabled: disabled,
      ref: inputRef,
      'data-hj-whitelist': true
    });
  };

  return InputText;
}(_react.Component);

InputText.defaultProps = {
  id: 'ship-{{fieldName}}',
  type: 'text',
  className: '',
  disabled: false,
  autoFocus: false
};

InputText.propTypes = process.env.NODE_ENV !== "production" ? {
  autoFocus: _propTypes2.default.bool.isRequired,
  field: _propTypes2.default.object.isRequired,
  address: _AddressShapeWithValidation2.default,
  onChange: _propTypes2.default.func.isRequired,
  onBlur: _propTypes2.default.func.isRequired,
  id: _propTypes2.default.string,
  type: _propTypes2.default.string,
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  placeholder: _propTypes2.default.string,
  inputRef: _propTypes2.default.func,
  onFocus: _propTypes2.default.func
} : {};

exports.default = InputText;
module.exports = exports['default'];
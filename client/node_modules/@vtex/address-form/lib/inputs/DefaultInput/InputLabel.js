'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactIntl = require('react-intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InputLabel = function (_Component) {
  _inherits(InputLabel, _Component);

  function InputLabel() {
    _classCallCheck(this, InputLabel);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  InputLabel.prototype.render = function render() {
    var _props = this.props,
        field = _props.field,
        children = _props.children,
        intl = _props.intl;


    var className = (0, _classnames2.default)('input', 'ship-' + field.name, {
      required: field.required,
      hide: field.hidden,
      text: true // That's a bug in the Checkout's CSS
    });

    return _react2.default.createElement(
      'p',
      { className: className },
      _react2.default.createElement(
        'label',
        { htmlFor: 'ship-' + field.name },
        field.fixedLabel || intl.formatMessage({ id: 'address-form.field.' + field.label })
      ),
      children
    );
  };

  return InputLabel;
}(_react.Component);

InputLabel.propTypes = process.env.NODE_ENV !== "production" ? {
  field: _propTypes2.default.object,
  children: _propTypes2.default.node.isRequired,
  intl: _reactIntl.intlShape
} : {};

exports.default = (0, _reactIntl.injectIntl)(InputLabel);
module.exports = exports['default'];
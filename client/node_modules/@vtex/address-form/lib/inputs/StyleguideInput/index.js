'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Dropdown = require('@vtex/styleguide/lib/Dropdown');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _Input = require('@vtex/styleguide/lib/Input');

var _Input2 = _interopRequireDefault(_Input);

var _Link = require('@vtex/styleguide/lib/Link');

var _Link2 = _interopRequireDefault(_Link);

var _InputButton = require('@vtex/styleguide/lib/InputButton');

var _InputButton2 = _interopRequireDefault(_InputButton);

var _Checkbox = require('@vtex/styleguide/lib/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _reactIntl = require('react-intl');

var _addressRulesContext = require('../../addressRulesContext');

var _addressContainerContext = require('../../addressContainerContext');

var _recompose = require('recompose');

var _Spinner = require('../../Spinner');

var _Spinner2 = _interopRequireDefault(_Spinner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StyleguideInput = function (_Component) {
  _inherits(StyleguideInput, _Component);

  function StyleguideInput(props) {
    _classCallCheck(this, StyleguideInput);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.handleChange = function (e) {
      _this.setState({ showErrorMessage: false });
      _this.props.onChange && _this.props.onChange(e.target.value);
    };

    _this.handleFocus = function (event) {
      _this.setState({ showErrorMessage: false });
    };

    _this.handleSubmit = function (event) {
      event.preventDefault();
      _this.setState({ showErrorMessage: true });
      _this.props.onSubmit && _this.props.onSubmit();
    };

    _this.handleBlur = function (event) {
      _this.setState({ showErrorMessage: true });
      _this.props.onBlur && _this.props.onBlur(event);
    };

    _this.state = {
      isInputValid: props.address[props.field.name].valid || true,
      showErrorMessage: false
    };
    return _this;
  }

  StyleguideInput.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.address[prevProps.field.name] !== this.props.address[this.props.field.name]) {
      this.setState({
        isInputValid: this.props.address[this.props.field.name].valid || true
      });
    }
  };

  StyleguideInput.prototype.render = function render() {
    var _props = this.props,
        address = _props.address,
        autoFocus = _props.autoFocus,
        Button = _props.Button,
        field = _props.field,
        options = _props.options,
        loadingProp = _props.loading,
        inputRef = _props.inputRef,
        intl = _props.intl,
        toggleNotApplicable = _props.toggleNotApplicable,
        submitLabel = _props.submitLabel;

    var disabled = !!address[field.name].disabled;

    var loading = loadingProp != null ? loadingProp : address[field.name].loading;

    var inputCommonProps = {
      label: this.props.intl.formatMessage({
        id: 'address-form.field.' + field.name
      }),
      autoFocus: autoFocus,
      value: address[field.name].value || '',
      disabled: disabled,
      error: !this.state.isInputValid,
      ref: inputRef,
      errorMessage: this.state.showErrorMessage && address[field.name].reason && this.props.intl.formatMessage({
        id: 'address-form.error.' + address[field.name].reason
      }),
      onBlur: this.handleBlur,
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      isLoading: loading
    };

    if (field.name === 'postalCode') {
      return _react2.default.createElement(
        'form',
        {
          className: 'vtex-address-form__postalCode',
          onSubmit: this.handleSubmit
        },
        Button ? _react2.default.createElement(_InputButton2.default, _extends({}, inputCommonProps, {
          button: submitLabel || intl.formatMessage({ id: 'address-form.search' })
        })) : _react2.default.createElement(_Input2.default, _extends({}, inputCommonProps, {
          suffix: _react2.default.createElement(_Spinner2.default, { isLoading: loading })
        })),
        field.forgottenURL && _react2.default.createElement(
          'div',
          { className: 'pt4 flex-none' },
          _react2.default.createElement(
            _Link2.default,
            { href: field.forgottenURL, target: '_blank' },
            intl.formatMessage({
              id: 'address-form.dontKnowPostalCode'
            })
          )
        )
      );
    }

    if (field.name === 'addressQuery') {
      return _react2.default.createElement(
        'div',
        { className: 'vtex-address-form__addressQuery flex flex-row pb7' },
        _react2.default.createElement(_Input2.default, {
          label: field.fixedLabel || intl.formatMessage({ id: 'address-form.field.' + field.label }),
          errorMessage: address[field.name].reason && this.state.showErrorMessage && this.props.intl.formatMessage({
            id: 'address-form.error.' + address[field.name].reason
          }),
          placeholder: intl.formatMessage({
            id: 'address-form.geolocation.example.' + address.country.value,
            defaultMessage: intl.formatMessage({
              id: 'address-form.geolocation.example.UNI'
            })
          }),
          onChange: this.handleChange,
          onBlur: this.handleBlur,
          onFocus: this.handleFocus,
          disabled: loading || disabled,
          error: !this.state.isInputValid,
          ref: inputRef,
          suffix: _react2.default.createElement(_Spinner2.default, { isLoading: loading })
        })
      );
    }

    if (field.name === 'number' && (field.notApplicable || address['addressQuery'].geolocationAutoCompleted)) {
      return _react2.default.createElement(
        'div',
        { className: 'vtex-address-form__number-div flex flex-row pb7' },
        _react2.default.createElement(
          'div',
          { className: 'vtex-address-form__number-input flex w-50' },
          _react2.default.createElement(_Input2.default, {
            label: field.fixedLabel || intl.formatMessage({ id: 'address-form.field.' + field.label }),
            errorMessage: address[field.name].reason && this.showErrorMessage && this.props.intl.formatMessage({
              id: 'address-form.error.' + address[field.name].reason
            }),
            onChange: this.handleChange,
            onBlur: this.handleBlur,
            onFocus: this.handleFocus,
            disabled: loading || disabled,
            error: !this.state.isInputValid,
            ref: inputRef,
            value: address[field.name].value || ''
          })
        ),
        _react2.default.createElement(
          'div',
          { className: 'vtex-address-form__number-checkbox flex flex-row ml7 mt6 w-50' },
          _react2.default.createElement(_Checkbox2.default, {
            id: 'option-0',
            label: this.props.notApplicableLabel || 'N/A',
            name: 'default-checkbox-group',
            onChange: toggleNotApplicable,
            value: 'op',
            checked: !!address[field.name].disabled
          })
        )
      );
    }

    if (options) {
      return _react2.default.createElement(
        'div',
        { className: 'vtex-address-form__' + field.name + ' pb6' },
        _react2.default.createElement(_Dropdown2.default, {
          options: options,
          value: address[field.name].value || '',
          disabled: disabled,
          ref: inputRef,
          label: intl.formatMessage({
            id: 'address-form.field.' + field.label
          }),
          onChange: this.handleChange,
          onBlur: this.handleBlur
        })
      );
    }

    return _react2.default.createElement(
      'div',
      {
        className: 'vtex-address-form__' + field.name + ' ' + (field.hidden ? 'dn' : '') + ' pb7'
      },
      _react2.default.createElement(_Input2.default, {
        label: this.props.intl.formatMessage({
          id: 'address-form.field.' + field.label
        }),
        errorMessage: address[field.name].reason && intl.formatMessage({
          id: 'address-form.error.' + address[field.name].reason
        }),
        value: address[field.name].value || '',
        disabled: disabled,
        error: !this.state.isInputValid,
        maxLength: '' + field.maxLength,
        ref: inputRef,
        placeholder: !field.hidden && !field.required ? this.props.intl.formatMessage({ id: 'address-form.optional' }) : null,
        onBlur: this.handleBlur,
        onChange: this.handleChange,
        onFocus: this.handleFocus
      })
    );
  };

  return StyleguideInput;
}(_react.Component);

StyleguideInput.defaultProps = {
  onBlur: function onBlur() {},
  onSubmit: function onSubmit() {}
};

StyleguideInput.propTypes = process.env.NODE_ENV !== "production" ? {
  address: _propTypes2.default.object,
  autoFocus: _propTypes2.default.bool,
  loading: _propTypes2.default.bool,
  Button: _propTypes2.default.func,
  field: _propTypes2.default.object.isRequired,
  inputRef: _propTypes2.default.func,
  intl: _reactIntl.intlShape,
  onChange: _propTypes2.default.func.isRequired,
  onBlur: _propTypes2.default.func,
  onSubmit: _propTypes2.default.func,
  options: _propTypes2.default.array,
  toggleNotApplicable: _propTypes2.default.func,
  rules: _propTypes2.default.object,
  submitLabel: _propTypes2.default.string,
  notApplicableLabel: _propTypes2.default.string
} : {};

var enhance = (0, _recompose.compose)(_addressContainerContext.injectAddressContext, _addressRulesContext.injectRules, _reactIntl.injectIntl);

exports.default = enhance(StyleguideInput);
module.exports = exports['default'];
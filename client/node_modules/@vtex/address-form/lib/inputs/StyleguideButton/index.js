'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Button = require('@vtex/styleguide/lib/Button');

var _Button2 = _interopRequireDefault(_Button);

var _reactIntl = require('react-intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StyleguideButton = function (_Component) {
  _inherits(StyleguideButton, _Component);

  function StyleguideButton() {
    _classCallCheck(this, StyleguideButton);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  StyleguideButton.prototype.render = function render() {
    var _props = this.props,
        buttonLabel = _props.buttonLabel,
        intl = _props.intl;

    return _react2.default.createElement(
      _Button2.default,
      { type: 'submit', size: 'small', variation: 'secondary' },
      buttonLabel || intl.formatMessage({ id: 'address-form.search' })
    );
  };

  return StyleguideButton;
}(_react.Component);

StyleguideButton.propTypes = process.env.NODE_ENV !== "production" ? {
  buttonLabel: _propTypes2.default.string.isRequired,
  intl: _reactIntl.intlShape
} : {};

exports.default = (0, _reactIntl.injectIntl)(StyleguideButton);
module.exports = exports['default'];
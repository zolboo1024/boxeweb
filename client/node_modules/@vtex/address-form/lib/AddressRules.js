'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _addressRulesContext = require('./addressRulesContext');

var _default = require('./country/default');

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MODULE_NOT_FOUND_PATTERN = /Cannot find module '\.\/[a-z]*\/?([A-z-]{1,7})'/;

var AddressRules = function (_Component) {
  _inherits(AddressRules, _Component);

  function AddressRules(props) {
    _classCallCheck(this, AddressRules);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.state = {
      country: null,
      rules: null
    };
    return _this;
  }

  AddressRules.prototype.componentDidMount = function componentDidMount() {
    return this.updateRules();
  };

  AddressRules.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.country !== this.props.country || prevProps.useGeolocation !== this.props.useGeolocation) {
      return this.updateRules();
    }
  };

  AddressRules.prototype.parseError = function parseError(e) {
    var result = MODULE_NOT_FOUND_PATTERN.exec(e.message);
    if (!result) return false;
    return result[1];
  };

  AddressRules.prototype.fetchRules = function fetchRules(rulePromise) {
    var _this2 = this;

    return rulePromise.then(function (ruleData) {
      return ruleData.default || ruleData;
    }).catch(function (error) {
      var errorType = _this2.parseError(error);
      if (errorType) {
        if (process.env.NODE_ENV !== 'production') {
          console.warn('Couldn\'t load rules for country ' + errorType + ', using default rules instead.');
        }
        return _default2.default;
      }

      if (process.env.NODE_ENV !== 'production') {
        console.error('An unknown error occurred.', error);
      }
    });
  };

  AddressRules.prototype.updateRules = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      var _props, shouldUseIOFetching, fetch, country, useGeolocation, rulePromise, rules;

      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _props = this.props, shouldUseIOFetching = _props.shouldUseIOFetching, fetch = _props.fetch, country = _props.country, useGeolocation = _props.useGeolocation;
              rulePromise = shouldUseIOFetching ? import('./country/' + country) : fetch(country);
              _context.next = 4;
              return this.fetchRules(rulePromise);

            case 4:
              rules = _context.sent;


              if (useGeolocation && rules.geolocation) {
                rules = _extends({}, rules, {
                  // set a hidden flag for internal usage
                  _usingGeolocationRules: true,
                  // overwrite field with configs defined on `rules.geolocation`
                  fields: rules.fields.map(function (field) {
                    if (rules.geolocation[field.name]) {
                      // ignore unrelated props for the field
                      // eslint-disable-next-line no-unused-vars
                      var _rules$geolocation$fi = rules.geolocation[field.name],
                          valueIn = _rules$geolocation$fi.valueIn,
                          types = _rules$geolocation$fi.types,
                          handler = _rules$geolocation$fi.handler,
                          props = _objectWithoutProperties(_rules$geolocation$fi, ['valueIn', 'types', 'handler']);

                      return _extends({}, field, props);
                    }
                    return field;
                  })
                });
              }

              this.setState({ rules: rules });
              return _context.abrupt('return', rules);

            case 8:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function updateRules() {
      return _ref.apply(this, arguments);
    }

    return updateRules;
  }();

  AddressRules.prototype.render = function render() {
    var children = this.props.children;
    var rules = this.state.rules;


    if (!rules) return null;

    return _react2.default.createElement(
      _addressRulesContext.RulesContext.Provider,
      { value: rules },
      children
    );
  };

  return AddressRules;
}(_react.Component);

AddressRules.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _propTypes2.default.any.isRequired,
  country: _propTypes2.default.string.isRequired,
  fetch: _propTypes2.default.func,
  /** Whether to use IO built-in file fetching */
  shouldUseIOFetching: _propTypes2.default.bool,
  /** Whether the rules should contemplate the geolocation field rules */
  useGeolocation: _propTypes2.default.bool
} : {};

exports.default = AddressRules;
module.exports = exports['default'];
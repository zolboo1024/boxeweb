'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.addValidation = addValidation;
exports.removeValidation = removeValidation;
exports.addNewField = addNewField;
exports.removeField = removeField;
exports.addDisabledToProtectedFields = addDisabledToProtectedFields;
exports.handleMultipleValues = handleMultipleValues;
exports.maskFields = maskFields;
exports.addFocusToNextInvalidField = addFocusToNextInvalidField;
exports.default = getGGUID;
exports.newAddress = newAddress;

var _reduce = require('lodash/reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _filter = require('lodash/filter');

var _filter2 = _interopRequireDefault(_filter);

var _map = require('lodash/map');

var _map2 = _interopRequireDefault(_map);

var _difference = require('lodash/difference');

var _difference2 = _interopRequireDefault(_difference);

var _find = require('lodash/find');

var _find2 = _interopRequireDefault(_find);

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _isUndefined = require('lodash/isUndefined');

var _isUndefined2 = _interopRequireDefault(_isUndefined);

var _fields = require('../selectors/fields');

var _validateAddress = require('../validateAddress');

var _msk = require('msk');

var _msk2 = _interopRequireDefault(_msk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function addValidation(address) {
  return (0, _reduce2.default)(address, function (newAddress, propValue, propName) {
    var isStringOrArray = typeof propValue === 'string' || Array.isArray(propValue);
    newAddress[propName] = {
      value: propValue && !(0, _isUndefined2.default)(propValue.value) ? propValue.value : isStringOrArray ? propValue : null
    };
    return newAddress;
  }, {});
}

function removeValidation(address) {
  return (0, _reduce2.default)(address, function (newAddress, propValue, propName) {
    if (!propValue) {
      newAddress[propName] = propValue;
      return newAddress;
    }

    newAddress[propName] = (0, _isUndefined2.default)(propValue.value) ? (0, _isPlainObject2.default)(propValue) ? null : propValue : propValue.value;
    return newAddress;
  }, {});
}

function addNewField(address, fieldName, value) {
  return (0, _reduce2.default)(address, function (newAddress, prop, propName) {
    var _extends2;

    newAddress[propName] = _extends({}, prop, (_extends2 = {}, _extends2[fieldName] = value, _extends2));
    return newAddress;
  }, {});
}

function removeField(address, fieldName) {
  return (0, _reduce2.default)(address, function (newAddress, prop, propName) {
    newAddress[propName] = _extends({}, prop);
    delete newAddress[propName][fieldName];
    return newAddress;
  }, {});
}

function addDisabledToProtectedFields(fields, rules) {
  return (0, _reduce2.default)(fields, function (newFields, prop, propName) {
    var hasValue = prop && prop.value;
    var isProtectField = rules.postalCodeProtectedFields && rules.postalCodeProtectedFields.indexOf(propName) !== -1;

    newFields[propName] = prop;

    if (isProtectField && hasValue) {
      newFields[propName] = _extends({}, prop, {
        disabled: true
      });
    }

    return newFields;
  }, {});
}

var MULTIPLE_OPTIONS_SEPARATOR_REGEX = new RegExp(/;|(?:::)/);

function handleMultipleValues(fields) {
  return (0, _reduce2.default)(fields, function (newFields, prop, propName) {
    var hasMultipleValues = MULTIPLE_OPTIONS_SEPARATOR_REGEX.test(prop.value);

    newFields[propName] = prop;

    if (hasMultipleValues) {
      newFields[propName] = _extends({}, prop, {
        value: null,
        valueOptions: prop.value.split(MULTIPLE_OPTIONS_SEPARATOR_REGEX)
      });
    }

    return newFields;
  }, {});
}

function maskFields(addressFields, rules) {
  return (0, _reduce2.default)(addressFields, function (newAddressFields, prop, propName) {
    var fieldRule = (0, _fields.getField)(propName, rules);

    newAddressFields[propName] = prop;

    if (fieldRule && fieldRule.mask) {
      newAddressFields[propName] = _extends({}, prop, prop.value ? { value: (0, _msk2.default)(prop.value, fieldRule.mask) } : {});
    }

    return newAddressFields;
  }, {});
}

function addFocusToNextInvalidField(fields, rules) {
  var invalidFilledField = getFirstInvalidFilledField(fields, rules);

  if (invalidFilledField) {
    var _extends3;

    var fieldName = invalidFilledField.fieldName,
        field = invalidFilledField.field;

    return _extends({}, fields, (_extends3 = {}, _extends3[fieldName] = field, _extends3));
  }

  var requiredField = getFirstRequiredFieldNotFilled(fields, rules);

  if (requiredField) {
    var _extends4;

    var _fieldName = requiredField.fieldName,
        _field = requiredField.field;

    return _extends({}, fields, (_extends4 = {}, _extends4[_fieldName] = _field, _extends4));
  }

  return fields;
}

function getFirstInvalidFilledField(fields, rules) {
  var allFieldsVisited = addNewField(fields, 'visited', true);
  var validatedFields = (0, _validateAddress.validateAddress)(allFieldsVisited, rules);

  var firstInvalidField = (0, _find2.default)(rules.fields, function (field) {
    return validatedFields[field.name] && validatedFields[field.name].valid === false;
  });

  if (firstInvalidField) {
    return {
      fieldName: firstInvalidField.name,
      field: _extends({}, validatedFields[firstInvalidField.name], {
        focus: true
      })
    };
  }

  return null;
}

function getFirstRequiredFieldNotFilled(fields, rules) {
  var requiredFields = (0, _filter2.default)(rules.fields, function (field) {
    return field.required;
  });
  var requiredFieldsNames = (0, _map2.default)(requiredFields, function (field) {
    return field.name;
  });

  var fieldsNames = Object.keys(fields);
  var requiredFieldNotFilled = (0, _difference2.default)(requiredFieldsNames, fieldsNames);

  if (requiredFieldNotFilled && requiredFieldNotFilled.length > 0) {
    var nextRequiredFieldName = requiredFieldNotFilled[0];

    return { fieldName: nextRequiredFieldName, field: { focus: true } };
  }

  return null;
}

var gguid = 1;

function getGGUID() {
  return (gguid++ * new Date().getTime() * -1).toString().replace('-', '');
}

function newAddress() {
  var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var addressType = address.addressType,
      city = address.city,
      complement = address.complement,
      country = address.country,
      geoCoordinates = address.geoCoordinates,
      neighborhood = address.neighborhood,
      number = address.number,
      postalCode = address.postalCode,
      receiverName = address.receiverName,
      reference = address.reference,
      state = address.state,
      street = address.street,
      addressQuery = address.addressQuery,
      addressId = address.addressId;


  return {
    addressId: addressId || { value: getGGUID() },
    addressType: addressType || { value: 'residential' },
    city: city || { value: null },
    complement: complement || { value: null },
    country: country || { value: null },
    geoCoordinates: geoCoordinates || { value: [] },
    neighborhood: neighborhood || { value: null },
    number: number || { value: null },
    postalCode: postalCode || { value: null },
    receiverName: receiverName || { value: null },
    reference: reference || { value: null },
    state: state || { value: null },
    street: street || { value: null },
    addressQuery: addressQuery || { value: '' }
  };
}
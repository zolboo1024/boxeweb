'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = getAddressByGeolocation;

var _geolocationAutoCompleteAddress = require('./geolocationAutoCompleteAddress');

var _geolocationAutoCompleteAddress2 = _interopRequireDefault(_geolocationAutoCompleteAddress);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getAddressByGeolocation(geolocationProps) {
  var address = geolocationProps.address,
      onChangeAddress = geolocationProps.onChangeAddress,
      rules = geolocationProps.rules,
      googleMaps = geolocationProps.googleMaps;


  if (!googleMaps || !address || !rules || !address['number'].value) {
    return;
  }

  var geocoder = new googleMaps.Geocoder();
  geocoder.geocode({
    componentRestrictions: {
      country: rules.abbr
    },
    address: (address['number'].value || '') + ' ' + (address['street'].value || '') + ' ' + (address['city'].value || '') + ' ' + (address['state'].value || '')
  }, function (results, status) {
    if (status === googleMaps.GeocoderStatus.OK) {
      if (results[0]) {
        var googleAddress = results[0];
        var autoCompletedAddress = (0, _geolocationAutoCompleteAddress2.default)(address, googleAddress, rules);

        onChangeAddress(_extends({}, autoCompletedAddress, {
          complement: {
            value: null
          },
          reference: {
            value: null
          }
        }));
        return autoCompletedAddress;
      }
    } else {
      console.warn('Google Maps Error: ' + status);
    }
  });
}
module.exports = exports['default'];
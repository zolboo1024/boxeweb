'use strict';

exports.__esModule = true;

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _googleMaps = require('./googleMaps');

var _googleMaps2 = _interopRequireDefault(_googleMaps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GoogleMapsContainer = function (_Component) {
  _inherits(GoogleMapsContainer, _Component);

  function GoogleMapsContainer(props) {
    _classCallCheck(this, GoogleMapsContainer);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.state = {
      googleMaps: null,
      loading: true
    };
    return _this;
  }

  GoogleMapsContainer.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var _props = this.props,
        locale = _props.locale,
        apiKey = _props.apiKey;


    (0, _googleMaps2.default)({ locale: locale, apiKey: apiKey }).then(function (googleMaps) {
      _this2.setState({ googleMaps: googleMaps, loading: false });
    });
  };

  GoogleMapsContainer.prototype.render = function render() {
    var _state = this.state,
        googleMaps = _state.googleMaps,
        loading = _state.loading;


    return this.props.children({
      loading: loading,
      googleMaps: googleMaps
    });
  };

  return GoogleMapsContainer;
}(_react.Component);

GoogleMapsContainer.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _propTypes2.default.func.isRequired,
  apiKey: _propTypes2.default.string.isRequired,
  locale: _propTypes2.default.string.isRequired
} : {};

exports.default = GoogleMapsContainer;
module.exports = exports['default'];
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _DefaultInput = require('../inputs/DefaultInput');

var _DefaultInput2 = _interopRequireDefault(_DefaultInput);

var _AddressShapeWithValidation = require('../propTypes/AddressShapeWithValidation');

var _AddressShapeWithValidation2 = _interopRequireDefault(_AddressShapeWithValidation);

var _geolocationAutoCompleteAddress = require('./geolocationAutoCompleteAddress');

var _geolocationAutoCompleteAddress2 = _interopRequireDefault(_geolocationAutoCompleteAddress);

var _constants = require('../constants');

var _addressRulesContext = require('../addressRulesContext');

var _recompose = require('recompose');

var _addressContainerContext = require('../addressContainerContext');

var _reactIntl = require('react-intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GeolocationInput = function (_Component) {
  _inherits(GeolocationInput, _Component);

  function GeolocationInput(props) {
    _classCallCheck(this, GeolocationInput);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.handleMountInput = function (input) {
      var _this$props = _this.props,
          useSearchBox = _this$props.useSearchBox,
          rules = _this$props.rules,
          googleMaps = _this$props.googleMaps;


      if (!input) {
        _this.input = null;
        _this.autocomplete = null;
        _this.autocompleteListener.remove();
        return;
      }

      _this.input = input;

      var options = rules.abbr ? {
        types: ['address'],
        componentRestrictions: {
          country: rules.abbr
        }
      } : { types: ['address'] };

      if (useSearchBox) {
        _this.autocomplete = new googleMaps.places.SearchBox(_this.input);
        _this.geocoder = new googleMaps.Geocoder();
      } else {
        _this.autocomplete = new googleMaps.places.Autocomplete(_this.input, options);
      }

      if (_this.autocompleteListener) {
        _this.autocompleteListener.remove();
      }

      _this.autocompleteListener = useSearchBox ? _this.addSearchBoxListener() : _this.addAutocompleteListener();
    };

    _this.addAutocompleteListener = function () {
      return _this.props.googleMaps.event.addListener(_this.autocomplete, 'place_changed', function () {
        var googleAddress = _this.autocomplete.getPlace();

        if (googleAddress.geometry) {
          _this.handleAddress(googleAddress);
          return;
        }
      });
    };

    _this.addSearchBoxListener = function () {
      return _this.props.googleMaps.event.addListener(_this.autocomplete, 'places_changed', function () {
        var googleAddresses = _this.autocomplete.getPlaces();
        var firstPlaceFound = googleAddresses && googleAddresses[0];

        if (!firstPlaceFound) return;

        if (!firstPlaceFound.address_components) {
          _this.geocoder.geocode({ address: firstPlaceFound.formatted_address }, function (address) {
            return firstPlaceFound = address;
          });
        }

        if (firstPlaceFound.geometry) {
          _this.handleAddress(firstPlaceFound);
          return;
        }
      });
    };

    _this.handleAddress = function (googleAddress) {
      _this.handleChangeInput(googleAddress.formatted_address);
      _this.handlePlaceChanged(googleAddress);
    };

    _this.handlePlaceChanged = function (googleAddress) {
      var address = (0, _geolocationAutoCompleteAddress2.default)(_this.state.address, googleAddress, _this.props.rules);

      _this.props.onChangeAddress(address);
    };

    _this.handleChangeInput = function (value) {
      _this.setState(function (prevState) {
        return {
          address: _extends({}, prevState.address, {
            addressQuery: _extends({}, prevState.addressQuery, {
              value: value
            })
          })
        };
      });
    };

    _this.state = {
      address: _this.props.address
    };

    _this.handleMountInput = _this.handleMountInput.bind(_this);
    return _this;
  }

  GeolocationInput.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    this.setState({
      address: nextProps.address
    });
  };

  GeolocationInput.prototype.render = function render() {
    var _props = this.props,
        Input = _props.Input,
        rules = _props.rules,
        loadingGoogle = _props.loadingGoogle,
        inputProps = _props.inputProps,
        placeholder = _props.placeholder,
        autoFocus = _props.autoFocus;
    var _state = this.state,
        address = _state.address,
        isValidGoogleAddress = _state.isValidGoogleAddress;


    var newAddress = _extends({}, address, {
      addressQuery: _extends({}, address.addressQuery ? address.addressQuery : { value: '' }, isValidGoogleAddress === false ? { valid: false, reason: _constants.EGOOGLEADDRESS } : {}, {
        loading: loadingGoogle
      })
    });

    return _react2.default.createElement(Input, _extends({}, inputProps, {
      key: rules.country,
      field: {
        label: 'addressQuery',
        name: 'addressQuery'
      },
      options: null,
      address: newAddress,
      placeholder: placeholder,
      autoFocus: autoFocus,
      onChange: !loadingGoogle ? this.handleChangeInput : function () {},
      inputRef: !loadingGoogle ? this.handleMountInput : undefined
    }));
  };

  return GeolocationInput;
}(_react.Component);

GeolocationInput.defaultProps = {
  Input: _DefaultInput2.default,
  inputProps: {},
  autofocus: false,
  useSearchBox: false
};

GeolocationInput.propTypes = process.env.NODE_ENV !== "production" ? {
  Input: _propTypes2.default.func,
  inputProps: _propTypes2.default.object,
  placeholder: _propTypes2.default.string,
  useSearchBox: _propTypes2.default.bool,
  rules: _propTypes2.default.object.isRequired,
  address: _AddressShapeWithValidation2.default.isRequired,
  onChangeAddress: _propTypes2.default.func.isRequired,
  loadingGoogle: _propTypes2.default.bool,
  autoFocus: _propTypes2.default.bool,
  googleMaps: _propTypes2.default.object
} : {};

var enhance = (0, _recompose.compose)(_addressContainerContext.injectAddressContext, _addressRulesContext.injectRules, _reactIntl.injectIntl);
exports.default = enhance(GeolocationInput);
module.exports = exports['default'];
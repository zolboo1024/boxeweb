'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _debounce = require('lodash/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _geolocationAutoCompleteAddress = require('./geolocationAutoCompleteAddress');

var _geolocationAutoCompleteAddress2 = _interopRequireDefault(_geolocationAutoCompleteAddress);

var _addressRulesContext = require('../addressRulesContext');

var _recompose = require('recompose');

var _addressContainerContext = require('../addressContainerContext');

var _AddressShapeWithValidation = require('../propTypes/AddressShapeWithValidation');

var _AddressShapeWithValidation2 = _interopRequireDefault(_AddressShapeWithValidation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Map = function (_Component) {
  _inherits(Map, _Component);

  function Map() {
    var _temp, _this, _ret;

    _classCallCheck(this, Map);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.mapMounted = function (mapElement) {
      if (!mapElement) {
        _this.map = null;
        _this.marker.setMap(null);
        _this.marker = null;
        return;
      }

      var location = _this.getLocation();
      _this.createMap(mapElement, location);
      _this.changeMarkerPosition(location);
    }, _this.createMap = function (mapElement, location) {
      _this._mapElement = mapElement;

      var mapOptions = {
        zoom: 15,
        center: location,
        streetViewControl: false,
        mapTypeControl: false,
        zoomControl: true,
        zoomControlOptions: {
          position: _this.props.googleMaps.ControlPosition.TOP_RIGHT,
          style: _this.props.googleMaps.ZoomControlStyle.SMALL
        }
      };

      _this.map = new _this.props.googleMaps.Map(_this._mapElement, mapOptions);
    }, _this.changeMarkerPosition = function (location) {
      if (!_this.map) return;
      if (_this.marker) {
        _this.marker.setMap(null);
        _this.marker = null;
      }

      var markerOptions = {
        position: location,
        draggable: true,
        map: _this.map
      };

      _this.marker = new _this.props.googleMaps.Marker(markerOptions);

      _this.markerListener = _this.props.googleMaps.event.addListener(_this.marker, 'position_changed', (0, _debounce2.default)(function () {
        var newPosition = _this.marker.getPosition();
        _this.handleMarkerPositionChange(newPosition);
      }, 1500));
    }, _this.getLocation = function () {
      var _this$getCoordinatesF = _this.getCoordinatesFromProps(_this.props),
          lng = _this$getCoordinatesF[0],
          lat = _this$getCoordinatesF[1];

      var location = new _this.props.googleMaps.LatLng(lat, lng);
      return location;
    }, _this.recenterMap = function (location) {
      if (!_this.map) return;

      _this.map.panTo(location);
    }, _this.handleMarkerPositionChange = function (newPosition) {
      if (!_this.geocoder) {
        _this.geocoder = new _this.props.googleMaps.Geocoder();
      }

      _this.geocoder.geocode({ location: newPosition }, _this.handleNewMarkerPosition);
    }, _this.handleNewMarkerPosition = function (results, status) {
      var _this$props = _this.props,
          googleMaps = _this$props.googleMaps,
          onChangeAddress = _this$props.onChangeAddress,
          rules = _this$props.rules;


      if (status === googleMaps.GeocoderStatus.OK) {
        if (results[0]) {
          var googleAddress = results[0];
          var address = (0, _geolocationAutoCompleteAddress2.default)(_this.props.address, googleAddress, rules);
          var possibleChangedFields = {
            geoCoordinates: address.geoCoordinates,
            postalCode: address.postalCode
          };
          onChangeAddress(possibleChangedFields);
        }
      } else {
        console.warn('Google Maps Error: ' + status);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Map.prototype.getCoordinatesFromProps = function getCoordinatesFromProps(props) {
    var geoCoordinates = props.geoCoordinates,
        address = props.address;

    return geoCoordinates || address.geoCoordinates.value;
  };

  Map.prototype.shouldComponentUpdate = function shouldComponentUpdate(prevProps) {
    var rulesChanged = prevProps.rules.country !== this.props.rules.country;
    var loadingGoogleChanged = prevProps.loadingGoogle !== this.props.loadingGoogle;
    var geoCoordsChanged = this.isDifferentGeoCoords(this.getCoordinatesFromProps(prevProps), this.getCoordinatesFromProps(this.props));

    return geoCoordsChanged || rulesChanged || loadingGoogleChanged;
  };

  Map.prototype.componentDidUpdate = function componentDidUpdate() {
    var location = this.getLocation();
    this.changeMarkerPosition(location);
    this.recenterMap(location);
  };

  Map.prototype.isDifferentGeoCoords = function isDifferentGeoCoords(a, b) {
    return a[0] !== b[0] || a[1] !== b[1];
  };

  Map.prototype.render = function render() {
    return this.props.loadingGoogle ? this.props.loadingElement : _react2.default.createElement('div', _extends({ id: 'map-canvas', ref: this.mapMounted }, this.props.mapProps));
  };

  return Map;
}(_react.Component);

Map.defaultProps = {
  loadingElement: _react2.default.createElement(
    'div',
    null,
    'Loading...'
  )
};

Map.propTypes = process.env.NODE_ENV !== "production" ? {
  loadingElement: _propTypes2.default.node,
  mapProps: _propTypes2.default.object,
  geoCoordinates: _propTypes2.default.array,
  address: _AddressShapeWithValidation2.default,
  rules: _propTypes2.default.object.isRequired,
  onChangeAddress: _propTypes2.default.func.isRequired,
  loadingGoogle: _propTypes2.default.bool,
  googleMaps: _propTypes2.default.object
} : {};

var enhance = (0, _recompose.compose)(_addressContainerContext.injectAddressContext, _addressRulesContext.injectRules);
exports.default = enhance(Map);
module.exports = exports['default'];
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTestingLibrary = require('react-testing-library');

var reactTestingLibrary = _interopRequireWildcard(_reactTestingLibrary);

var _enzyme = require('enzyme');

var _reactTestRenderer = require('react-test-renderer');

var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);

var _reactIntl = require('react-intl');

var _en = require('../../messages/en.json');

var _en2 = _interopRequireDefault(_en);

var _en3 = require('i18n-iso-countries/langs/en.json');

var _en4 = _interopRequireDefault(_en3);

var _reduce = require('lodash/reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _countryISO = require('../../demo/src/countryISO');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function addCountryCodeNameSpace(obj) {
  return (0, _reduce2.default)(obj, function (acc, value, key) {
    acc['country.' + (0, _countryISO.getISOAlpha3)(key)] = value;
    return acc;
  }, {});
}

var messages = _extends({}, _en2.default, addCountryCodeNameSpace(_en4.default));

var customRender = function customRender(node, options) {
  var rendered = reactTestingLibrary.render(_react2.default.createElement(
    _reactIntl.IntlProvider,
    {
      messages: messages,
      locale: 'en-US' },
    node
  ), options);

  return _extends({}, rendered, {
    rerender: function rerender(newUi) {
      return customRender(newUi, {
        container: rendered.container,
        baseElement: rendered.baseElement
      });
    }
  });
};

function customMount(node) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      context = _ref.context,
      childContextTypes = _ref.childContextTypes;

  var intlProvider = new _reactIntl.IntlProvider({
    locale: 'en-US',
    messages: messages
  }, {});

  var _intlProvider$getChil = intlProvider.getChildContext(),
      intl = _intlProvider$getChil.intl;

  return (0, _enzyme.mount)(_react2.default.cloneElement(node, { intl: intl }), {
    context: Object.assign({}, context, { intl: intl }),
    childContextTypes: Object.assign({}, { intl: _reactIntl.intlShape }, childContextTypes)
  });
}

function customShallow(node) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { context: {} };

  var intlProvider = new _reactIntl.IntlProvider({
    locale: 'en-US',
    messages: messages
  }, {});

  var _intlProvider$getChil2 = intlProvider.getChildContext(),
      intl = _intlProvider$getChil2.intl;

  return (0, _enzyme.shallow)(_react2.default.cloneElement(node, { intl: intl }), _extends({}, options, { context: _extends({}, options.context, { intl: intl }) }));
}

// re-export everything
module.exports = _extends({}, reactTestingLibrary, {
  render: customRender,
  mount: customMount,
  shallow: customShallow,
  rendererCreate: function rendererCreate(node) {
    return _reactTestRenderer2.default.create(_react2.default.createElement(
      _reactIntl.IntlProvider,
      {
        messages: messages,
        locale: 'en-US' },
      node
    ));
  }
});
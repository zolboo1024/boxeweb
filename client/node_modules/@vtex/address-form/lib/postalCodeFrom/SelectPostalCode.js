'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _AddressShapeWithValidation = require('../propTypes/AddressShapeWithValidation');

var _AddressShapeWithValidation2 = _interopRequireDefault(_AddressShapeWithValidation);

var _postalCode = require('../selectors/postalCode');

var _InputFieldContainer = require('../InputFieldContainer');

var _InputFieldContainer2 = _interopRequireDefault(_InputFieldContainer);

var _reactIntl = require('react-intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SelectPostalCode = function (_Component) {
  _inherits(SelectPostalCode, _Component);

  function SelectPostalCode() {
    var _temp, _this, _ret;

    _classCallCheck(this, SelectPostalCode);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleChange = function (changedFields) {
      var rules = _this.props.rules;
      var currentLevelName = (0, _postalCode.getLastLevelField)(rules).name;
      var value = changedFields[currentLevelName].value;

      _this.props.onChangeAddress(_extends({}, _this.deComposeValue(currentLevelName, value || '')));
    }, _this.composeValue = function (currentLevelName, address) {
      return address[currentLevelName] && address[currentLevelName].value && address.postalCode && address.postalCode.value ? address[currentLevelName].value + '___' + address.postalCode.value : null;
    }, _this.deComposeValue = function (currentLevelName, value) {
      var _ref;

      var _value$split = value.split('___'),
          field = _value$split[0],
          postalCode = _value$split[1];

      return _ref = {}, _ref[currentLevelName] = { value: field }, _ref.postalCode = { value: postalCode }, _ref;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  SelectPostalCode.prototype.getOptions = function getOptions(fieldName, address, rules) {
    var _this2 = this;

    return (0, _postalCode.getPostalCodeOptions)(address, rules).map(function (_ref2) {
      var _this2$composeValue;

      var postalCode = _ref2.postalCode,
          label = _ref2.label;
      return {
        label: label,
        value: _this2.composeValue(fieldName, (_this2$composeValue = {}, _this2$composeValue[fieldName] = { value: label }, _this2$composeValue.postalCode = { value: postalCode }, _this2$composeValue))
      };
    });
  };

  SelectPostalCode.prototype.render = function render() {
    var _extends2;

    var _props = this.props,
        address = _props.address,
        rules = _props.rules,
        Input = _props.Input,
        loading = _props.loading,
        intl = _props.intl;

    var currentLevelField = (0, _postalCode.getLastLevelField)(rules);
    var fieldName = currentLevelField.name;

    var newAddress = _extends({}, address, (_extends2 = {}, _extends2[fieldName] = _extends({}, address[fieldName], {
      value: this.composeValue(fieldName, address)
    }), _extends2));

    return _react2.default.createElement(_InputFieldContainer2.default, {
      intl: intl,
      Input: Input,
      loading: loading,
      field: currentLevelField,
      address: newAddress,
      options: this.getOptions(fieldName, address, rules),
      rules: rules,
      onChangeAddress: this.handleChange
    });
  };

  return SelectPostalCode;
}(_react.Component);

SelectPostalCode.propTypes = process.env.NODE_ENV !== "production" ? {
  Input: _propTypes2.default.func.isRequired,
  intl: _reactIntl.intlShape,
  loading: _propTypes2.default.bool,
  address: _AddressShapeWithValidation2.default.isRequired,
  rules: _propTypes2.default.object.isRequired,
  onChangeAddress: _propTypes2.default.func.isRequired
} : {};

exports.default = (0, _reactIntl.injectIntl)(SelectPostalCode);
module.exports = exports['default'];
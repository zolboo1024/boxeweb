'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require('react-intl');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _AddressShape = require('./propTypes/AddressShape');

var _AddressShape2 = _interopRequireDefault(_AddressShape);

var _default = require('./country/default');

var _default2 = _interopRequireDefault(_default);

var _addressRulesContext = require('./addressRulesContext');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AddressSummary = function (_Component) {
  _inherits(AddressSummary, _Component);

  function AddressSummary() {
    _classCallCheck(this, AddressSummary);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  AddressSummary.prototype.render = function render() {
    var _props = this.props,
        rules = _props.rules,
        canEditData = _props.canEditData,
        showCountry = _props.showCountry,
        address = _props.address,
        children = _props.children,
        onClickMaskedInfoIcon = _props.onClickMaskedInfoIcon,
        giftRegistryDescription = _props.giftRegistryDescription;


    if (giftRegistryDescription) {
      return _react2.default.createElement(
        'span',
        null,
        _react2.default.createElement(
          'span',
          null,
          'At address of:'
        ),
        ' ',
        _react2.default.createElement(
          'strong',
          { className: 'gift-list-name' },
          giftRegistryDescription
        )
      );
    }

    if (!rules.summary) {
      rules.summary = _default2.default.summary;
      if (process.env.NODE_ENV !== 'production') {
        console.warn('Summary rules not found; applying default instead.');
      }
    }

    var maskedInfoIcon = _react2.default.createElement(
      'span',
      { key: 'maskedInfoIcon' },
      ' ',
      _react2.default.createElement(
        'a',
        {
          'data-i18n': '[title]modal.maskedInfoHello',
          className: 'client-masked-info',
          onClick: onClickMaskedInfoIcon
        },
        _react2.default.createElement('i', { className: 'icon-question-sign' })
      )
    );
    var country = rules.country ? rules.country : 'default';
    var lineCounter = 0;

    return _react2.default.createElement(
      'div',
      { className: 'address-summary address-summary-' + country },
      rules.summary.map(function (line, index) {
        return [].concat(line.map(function (field, index, summary) {
          var hasPreviousField = summary.length > 1 && index > 0 && address[summary[index - 1].name];

          var hasNextField = index + 1 < summary.length && address[summary[index + 1].name];
          var hasDifferentDelimiter = field.delimiterAfter !== '-';
          var shouldShowDelimiter = hasNextField || hasDifferentDelimiter;

          return address[field.name] ? _react2.default.createElement(
            'span',
            { key: field.name },
            field.delimiter && hasPreviousField && _react2.default.createElement(
              'span',
              { className: field.name + '-delimiter' },
              field.delimiter
            ),
            _react2.default.createElement(
              'span',
              { className: field.name },
              address[field.name]
            ),
            field.delimiterAfter && shouldShowDelimiter && _react2.default.createElement(
              'span',
              { className: field.name + '-delimiter-after' },
              field.delimiterAfter
            )
          ) : null;
        }), [index === 0 && !canEditData ? maskedInfoIcon : null]).reduce(function (line, field) {
          if (field == null) return line;else if (line == null) return [field];
          return [].concat(line, [field]);
        }, null);
      }).reduce(function (summary, line) {
        if (line == null) return summary;else if (summary == null) return [line];
        lineCounter++;
        return [].concat(summary, [_react2.default.createElement('br', { className: 'line' + lineCounter + '-delimiter', key: summary.length }), line]);
      }, null),
      showCountry && rules.country && [_react2.default.createElement('br', { className: 'line' + (lineCounter + 1) + '-delimiter', key: 'break' }), _react2.default.createElement(
        'span',
        { key: 'country', className: 'country' },
        this.props.intl.formatMessage({
          id: 'country.' + rules.country,
          defaultMessage: rules.country
        })
      )],
      children
    );
  };

  return AddressSummary;
}(_react.Component);

AddressSummary.defaultProps = {
  canEditData: true,
  showCountry: true
};

AddressSummary.propTypes = process.env.NODE_ENV !== "production" ? {
  canEditData: _propTypes2.default.bool,
  showCountry: _propTypes2.default.bool,
  address: _AddressShape2.default.isRequired,
  rules: _propTypes2.default.object.isRequired,
  children: _propTypes2.default.node,
  giftRegistryDescription: _propTypes2.default.string,
  onClickMaskedInfoIcon: _propTypes2.default.func,
  intl: _reactIntl.intlShape.isRequired
} : {};

exports.default = (0, _addressRulesContext.injectRules)((0, _reactIntl.injectIntl)(AddressSummary));
module.exports = exports['default'];
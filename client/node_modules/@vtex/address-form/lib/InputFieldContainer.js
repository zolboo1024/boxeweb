'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _AddressShapeWithValidation = require('./propTypes/AddressShapeWithValidation');

var _AddressShapeWithValidation2 = _interopRequireDefault(_AddressShapeWithValidation);

var _fields = require('./selectors/fields');

var _reduce = require('lodash/reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _msk = require('msk');

var _msk2 = _interopRequireDefault(_msk);

var _pureInputField = require('./pureInputField');

var _pureInputField2 = _interopRequireDefault(_pureInputField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InputFieldContainer = function (_Component) {
  _inherits(InputFieldContainer, _Component);

  function InputFieldContainer() {
    var _temp, _this, _ret;

    _classCallCheck(this, InputFieldContainer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.bindOnChange = function () {
      var _this$props = _this.props,
          field = _this$props.field,
          address = _this$props.address,
          rules = _this$props.rules,
          onChangeAddress = _this$props.onChangeAddress;

      var dependentFields = (0, _fields.getDependentFields)(field.name, rules);

      return function (value) {
        var _extends2;

        var clearedFields = _this.clearDependentFields(address, dependentFields);

        onChangeAddress(_extends({}, clearedFields, (_extends2 = {}, _extends2[field.name] = _extends({}, address[field.name], {
          postalCodeAutoCompleted: undefined,
          geolocationAutoCompleted: undefined,
          value: value
        }), _extends2)));
      };
    }, _this.bindNotApplicable = function () {
      var _this$props2 = _this.props,
          address = _this$props2.address,
          onChangeAddress = _this$props2.onChangeAddress,
          notApplicableLabel = _this$props2.notApplicableLabel;

      var labelNotApplicable = notApplicableLabel || 'N/A';

      return function () {
        onChangeAddress({
          number: _extends({}, address['number'], {
            value: address['number'].disabled ? null : labelNotApplicable,
            disabled: !address['number'].disabled
          })
        });
      };
    }, _this.bindOnBlur = function () {
      var _this$props3 = _this.props,
          field = _this$props3.field,
          address = _this$props3.address,
          onChangeAddress = _this$props3.onChangeAddress;

      var value = address[field.name] ? address[field.name].value : '';

      var maskedValue = field.mask ? (0, _msk2.default)(value, field.mask) : value;

      var isPostalCode = field.name === 'postalCode';

      return function () {
        var _onChangeAddress;

        if (isPostalCode && !value) return;

        onChangeAddress((_onChangeAddress = {}, _onChangeAddress[field.name] = _extends({}, address[field.name], {
          value: maskedValue,
          visited: true
        }), _onChangeAddress));
      };
    }, _this.inputRef = function (el) {
      _this.el = el;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  InputFieldContainer.prototype.clearDependentFields = function clearDependentFields(address, dependentFields) {
    if (dependentFields && dependentFields.length === 0) return {};

    return (0, _reduce2.default)(address, function (cleanAddress, addressField, prop) {
      var _extends3;

      var isDependentField = dependentFields.indexOf(prop) !== -1;
      return isDependentField ? _extends({}, cleanAddress, (_extends3 = {}, _extends3[prop] = {
        valueOptions: addressField.valueOptions,
        value: null
      }, _extends3)) : cleanAddress;
    }, {});
  };

  InputFieldContainer.prototype.componentDidMount = function componentDidMount() {
    this.addFocusIfNeeded();
  };

  InputFieldContainer.prototype.componentDidUpdate = function componentDidUpdate() {
    this.addFocusIfNeeded();
  };

  InputFieldContainer.prototype.addFocusIfNeeded = function addFocusIfNeeded() {
    var _props = this.props,
        address = _props.address,
        field = _props.field,
        onChangeAddress = _props.onChangeAddress;

    var fieldValue = address[field.name];
    if (this.el && typeof this.el.focus === 'function' && fieldValue.focus) {
      var _onChangeAddress2;

      this.el.focus();
      onChangeAddress((_onChangeAddress2 = {}, _onChangeAddress2[field.name] = _extends({}, fieldValue, {
        focus: undefined
      }), _onChangeAddress2));
    }
  };

  InputFieldContainer.prototype.render = function render() {
    var _props2 = this.props,
        Input = _props2.Input,
        Button = _props2.Button,
        loading = _props2.loading,
        field = _props2.field,
        autoFocus = _props2.autoFocus,
        address = _props2.address,
        options = _props2.options,
        onSubmit = _props2.onSubmit,
        submitLabel = _props2.submitLabel,
        rules = _props2.rules,
        shouldShowNumberKeyboard = _props2.shouldShowNumberKeyboard;


    var _options = options || ((0, _fields.hasOptions)(field, address) ? (0, _fields.getListOfOptions)(field, address, rules) : undefined);

    var notApplicableProps =
    // the right side of the || is for lib consumers without the 'useGeolocation' flag
    // unnecessary for 3.6.0+, but necessary for backward compatibility
    field.notApplicable || address[field.name].notApplicable ? {
      toggleNotApplicable: this.bindNotApplicable(),
      notApplicableLabel: this.props.notApplicableLabel
    } : null;

    return _react2.default.createElement(Input, _extends({
      Button: Button,
      address: address,
      loading: loading,
      field: field,
      autoFocus: autoFocus,
      options: _options,
      onSubmit: onSubmit,
      submitLabel: submitLabel,
      onChange: this.bindOnChange(),
      onBlur: this.bindOnBlur()
    }, notApplicableProps, {
      inputRef: this.inputRef,
      shouldShowNumberKeyboard: shouldShowNumberKeyboard
    }));
  };

  return InputFieldContainer;
}(_react.Component);

InputFieldContainer.propTypes = process.env.NODE_ENV !== "production" ? {
  autoFocus: false,
  shouldShowNumberKeyboard: false,
  loading: false
} : {};

InputFieldContainer.propTypes = process.env.NODE_ENV !== "production" ? {
  Button: _propTypes2.default.func,
  Input: _propTypes2.default.func.isRequired,
  loading: _propTypes2.default.bool,
  autoFocus: _propTypes2.default.bool,
  field: _propTypes2.default.object.isRequired,
  address: _AddressShapeWithValidation2.default,
  rules: _propTypes2.default.object.isRequired,
  options: _propTypes2.default.array,
  onChangeAddress: _propTypes2.default.func.isRequired,
  onSubmit: _propTypes2.default.func,
  notApplicableLabel: _propTypes2.default.string,
  shouldShowNumberKeyboard: _propTypes2.default.bool,
  submitLabel: _propTypes2.default.string
} : {};

exports.default = (0, _pureInputField2.default)(InputFieldContainer);
module.exports = exports['default'];
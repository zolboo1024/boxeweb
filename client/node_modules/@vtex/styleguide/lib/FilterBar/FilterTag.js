"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _merge = require("lodash/merge");

var _merge2 = _interopRequireDefault(_merge);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _withDeviceHoc = require("../utils/withDeviceHoc");

var _withDeviceHoc2 = _interopRequireDefault(_withDeviceHoc);

var _Button = require("../Button");

var _Button2 = _interopRequireDefault(_Button);

var _Clear = require("../icon/Clear");

var _Clear2 = _interopRequireDefault(_Clear);

var _CaretDown = require("../icon/CaretDown");

var _CaretDown2 = _interopRequireDefault(_CaretDown);

var _Statement = require("../Statement");

var _Statement2 = _interopRequireDefault(_Statement);

var _Menu = require("./Menu");

var _Menu2 = _interopRequireDefault(_Menu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var OPEN_MENU_STYLE = {
  backgroundColor: '#dbe9fd'
};
var emptyVirtualStatement = {
  subject: null,
  verb: null,
  object: null,
  error: null
};

var filterStatementBySubject = function filterStatementBySubject(statements, subject, options) {
  if (statements === void 0) {
    statements = [];
  }

  if (options === void 0) {
    options = {};
  }

  var hasStatement = statements.some(function (st) {
    return st.subject === subject;
  });
  return hasStatement ? statements.filter(function (st) {
    return st.subject === subject;
  }) : [_extends({}, emptyVirtualStatement, {
    subject: subject,
    verb: options[subject] && options[subject].verbs.length > 0 ? options[subject].verbs[0].value : null
  })];
};

var FilterTag =
/*#__PURE__*/
function (_PureComponent) {
  _inheritsLoose(FilterTag, _PureComponent);

  function FilterTag(props) {
    var _this;

    _this = _PureComponent.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_this), "openMenu", function () {
      if (_this.state.isMenuOpen) return;
      document.addEventListener('mousedown', _this.handleClickOutside);

      _this.setState({
        isMenuOpen: true,
        virtualStatement: filterStatementBySubject(_this.props.statements, _this.props.subject, _this.props.options)[0]
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleCloseMenu", function () {
      if (!_this.state.isMenuOpen) return;
      document.removeEventListener('mousedown', _this.handleClickOutside);

      _this.setState({
        isMenuOpen: false,
        virtualStatement: filterStatementBySubject([], _this.props.subject, _this.props.options)[0]
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleClickOutside", function (e) {
      if (_this.filterMenuContainer && _this.filterMenuContainer.current && !_this.filterMenuContainer.current.contains(e.target) && _this.state.isMenuOpen) {
        _this.handleCloseMenu();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleChangeStatement", function (statement) {
      _this.setState(function (state) {
        return {
          virtualStatement: (0, _merge2.default)({}, state.virtualStatement, _extends({}, statement))
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "resetVirtualStatement", function () {
      var _this$props = _this.props,
          subject = _this$props.subject,
          options = _this$props.options;
      var statement = filterStatementBySubject([], subject, options);

      _this.setState({
        virtualStatement: statement
      });
    });

    _this.filterMenuContainer = _react2.default.createRef();
    _this.state = {
      isMenuOpen: false,
      virtualStatement: filterStatementBySubject(props.statements, props.subject, props.options)[0]
    };
    return _this;
  }

  FilterTag.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    if (nextProps.statements && nextProps.statements.length > 0 && nextProps.subject && nextProps.statements.some(function (st) {
      return st.subject === nextProps.subject;
    })) {
      var statement = filterStatementBySubject(nextProps.statements, nextProps.subject, nextProps.options)[0];
      return {
        virtualStatement: (0, _merge2.default)({}, statement, prevState.virtualStatement)
      };
    }

    return prevState;
  };

  var _proto = FilterTag.prototype;

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.state.isMenuOpen) {
      this.handleCloseMenu();
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props2 = this.props,
        options = _this$props2.options,
        subject = _this$props2.subject,
        statements = _this$props2.statements,
        alwaysVisible = _this$props2.alwaysVisible,
        getFilterLabel = _this$props2.getFilterLabel,
        subjectPlaceholder = _this$props2.subjectPlaceholder,
        onClickClear = _this$props2.onClickClear,
        isMoreOptions = _this$props2.isMoreOptions,
        onSubmitFilterStatement = _this$props2.onSubmitFilterStatement,
        submitFilterLabel = _this$props2.submitFilterLabel,
        newFilterLabel = _this$props2.newFilterLabel,
        isMobile = _this$props2.isMobile,
        device = _this$props2.device,
        testIds = _this$props2.testIds,
        noOptionsMessage = _this$props2.noOptionsMessage,
        disabled = _this$props2.disabled;
    var _this$state = this.state,
        isMenuOpen = _this$state.isMenuOpen,
        virtualStatement = _this$state.virtualStatement;
    var statement = filterStatementBySubject(statements, subject)[0];
    var isEmpty = !!(statements && (!statement || statement && !statement.object));
    var shouldOmitSubject = !isMoreOptions;
    var shouldOmitVerb = isMoreOptions ? false : options[subject].verbs.length === 1; // this is temporary just to assure backward compatibility

    var compatibleOptions = {};
    Object.keys(options).forEach(function (opt) {
      compatibleOptions[opt] = (0, _merge2.default)({}, _extends({}, options[opt]));
      compatibleOptions[opt].verbs = options[opt].verbs.map(function (verb) {
        if (typeof verb.object === 'function') {
          return verb;
        }

        console.warn('[Deprecation alert]', 'FilterBar prop "options" will change contract due to Conditions and Statement refactor.', 'If you are using it, please inform our VTEX Styleguide team.');
        return _extends({}, verb, {
          object: function object(_ref) {
            var error = _ref.error,
                onChange = _ref.onChange,
                value = _ref.value;
            return _react2.default.createElement(_react2.default.Fragment, null, verb.object.renderFn({
              statements: [(0, _merge2.default)({}, statement, virtualStatement)],
              values: value,
              statementIndex: 0,
              error: error,
              extraParams: verb.object && verb.object.extraParams,
              onChangeObjectCallback: onChange
            }));
          }
        });
      });
    });
    return _react2.default.createElement("div", {
      ref: this.filterMenuContainer,
      style: _extends({}, isMenuOpen && OPEN_MENU_STYLE),
      className: (0, _classnames2.default)('br2 ba b--solid pv1 dib c-on-base', {
        pr4: !isEmpty && !isMoreOptions,
        'hover-bg-muted-5 b--muted-4': alwaysVisible && isEmpty || isMoreOptions,
        'bg-action-secondary b--action-secondary': !(alwaysVisible && isEmpty || isMoreOptions),
        'hover-bg-action-secondary': alwaysVisible && isEmpty || isMoreOptions && !disabled,
        'bg-transparent': !disabled && alwaysVisible && isEmpty,
        'bg-disabled hover-bg-disabled': disabled
      })
    }, _react2.default.createElement("div", {
      className: "flex items-stretch"
    }, _react2.default.createElement(_Menu2.default, {
      open: isMenuOpen,
      onBackgroundClick: this.handleCloseMenu,
      align: "left",
      options: options[subject],
      isMobile: isMobile,
      device: device,
      button: _react2.default.createElement("button", {
        "data-testid": options[subject] && options[subject].testId,
        type: "button",
        className: (0, _classnames2.default)('bw1 ba br2 v-mid relative b--transparent w-100 t-body outline-0', {
          'bg-transparent c-action-primary pointer': !disabled,
          'bg-disabled c-on-disabled': disabled
        }),
        onClick: isMenuOpen ? this.handleCloseMenu : this.openMenu,
        disabled: disabled
      }, _react2.default.createElement("div", {
        className: "flex items-center justify-center h-100 ph3 "
      }, _react2.default.createElement("span", {
        className: "flex items-center nl1 nowrap"
      }, isMoreOptions ? _react2.default.createElement("span", {
        className: "fw5",
        "data-testid": testIds.moreOptionsButton
      }, getFilterLabel()) : isMobile ? _react2.default.createElement("span", {
        className: "ttu f6 fw5"
      }, options[subject].label) : _react2.default.createElement(_react.Fragment, null, _react2.default.createElement("span", null, options[subject].label + ":\xA0"), _react2.default.createElement("span", {
        className: "fw5"
      }, "" + getFilterLabel(filterStatementBySubject(statements, subject)))), !isMobile && _react2.default.createElement("div", {
        className: "ml2 nr2"
      }, _react2.default.createElement(_CaretDown2.default, {
        size: 11,
        color: "currentColor"
      })))))
    }, _react2.default.createElement("div", {
      className: "ma6 ma5-ns h-75 h-auto-ns flex flex-column justify-between"
    }, _react2.default.createElement("div", {
      className: (0, _classnames2.default)({
        'overflow-scroll': isMobile && 'overflow-scroll'
      })
    }, _react2.default.createElement("div", {
      className: "flex flex-wrap " + (isMoreOptions ? 'mb6' : 'mb3')
    }, isMoreOptions && _react2.default.createElement("span", {
      className: "f4 mh3"
    }, newFilterLabel), _react2.default.createElement("div", {
      className: "flex flex-column"
    }, shouldOmitVerb && _react2.default.createElement("span", {
      className: "mh3"
    }, options[subject].verbs[0].label))), _react2.default.createElement(_Statement2.default, {
      isFullWidth: true,
      omitSubject: shouldOmitSubject,
      omitVerbs: shouldOmitVerb,
      options: compatibleOptions,
      subjectPlaceholder: subjectPlaceholder,
      noOptionsMessage: noOptionsMessage,
      statement: isMoreOptions ? virtualStatement : (0, _merge2.default)({}, statement, virtualStatement),
      onChangeStatement: this.handleChangeStatement,
      onChangeObjectCallback: function onChangeObjectCallback(st) {
        return _this2.handleChangeStatement(_extends({}, st, {
          error: null
        }));
      }
    })), _react2.default.createElement("div", {
      className: "flex justify-end mt4 mh3"
    }, _react2.default.createElement(_Button2.default, {
      testId: testIds.submitFiltersButton,
      block: isMobile,
      type: "submit",
      disabled: virtualStatement && !virtualStatement.object,
      onClick: function onClick() {
        onSubmitFilterStatement(virtualStatement);

        _this2.resetVirtualStatement();

        _this2.handleCloseMenu();
      }
    }, submitFilterLabel)))), !isEmpty && !isMoreOptions && _react2.default.createElement("div", {
      className: (0, _classnames2.default)('flex items-center', {
        'c-link hover-c-link pointer': !disabled,
        'bg-disabled c-disabled ': disabled
      }),
      onClick: function onClick() {
        if (disabled) {
          return;
        }

        _this2.resetVirtualStatement();

        onClickClear();

        _this2.handleCloseMenu();
      }
    }, _react2.default.createElement(_Clear2.default, {
      solid: true,
      size: 16
    }))));
  };

  return FilterTag;
}(_react.PureComponent);

FilterTag.defaultProps = {
  alwaysVisible: false,
  isMoreOptions: false,
  subjectPlaceholder: '…',
  newFilterLabel: 'New filter',
  disabled: false
};
FilterTag.propTypes = {
  options: _propTypes2.default.object.isRequired,
  subject: _propTypes2.default.string,
  statements: _propTypes2.default.array,
  alwaysVisible: _propTypes2.default.bool,
  getFilterLabel: _propTypes2.default.func,
  subjectPlaceholder: _propTypes2.default.string,
  onClickClear: _propTypes2.default.func,
  isMoreOptions: _propTypes2.default.bool,
  onSubmitFilterStatement: _propTypes2.default.func.isRequired,
  submitFilterLabel: _propTypes2.default.string.isRequired,
  newFilterLabel: _propTypes2.default.string,
  device: _propTypes2.default.string,
  isMobile: _propTypes2.default.bool,
  noOptionsMessage: _propTypes2.default.func,
  disabled: _propTypes2.default.bool,
  testIds: _propTypes2.default.shape({
    moreOptionsButton: _propTypes2.default.string,
    submitFiltersButton: _propTypes2.default.string
  })
};
exports.default = (0, _withDeviceHoc2.default)(FilterTag);
"use strict";

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _react3 = require("@testing-library/react");

var _index = require("./index");

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('AutocompleteInput', function () {
  it('should render with a small size bar', function () {
    var options = {
      onSelect: function onSelect() {
        return "''";
      },
      loading: false,
      value: [],
      size: 'small'
    };
    var input = {
      onChange: function onChange() {
        return "''";
      },
      onSearch: function onSearch() {
        return "''";
      },
      onClear: function onClear() {
        return "''";
      },
      placeholder: '',
      value: ''
    };

    var _render = (0, _react3.render)(_react2.default.createElement(_index2.default, {
      input: input,
      options: options
    })),
        asFragment = _render.asFragment;

    var result = asFragment();
    expect(result).toMatchSnapshot();
  });
  it('should render with a regular size bar', function () {
    var options = {
      onSelect: function onSelect() {
        return "''";
      },
      loading: false,
      value: [],
      size: 'regular'
    };
    var input = {
      onChange: function onChange() {
        return "''";
      },
      onSearch: function onSearch() {
        return "''";
      },
      onClear: function onClear() {
        return "''";
      },
      placeholder: '',
      value: ''
    };

    var _render2 = (0, _react3.render)(_react2.default.createElement(_index2.default, {
      input: input,
      options: options
    })),
        asFragment = _render2.asFragment;

    var result = asFragment();
    expect(result).toMatchSnapshot();
  });
  it('should render with a large size bar', function () {
    var options = {
      onSelect: function onSelect() {
        return "''";
      },
      loading: false,
      value: [],
      size: 'large'
    };
    var input = {
      onChange: function onChange() {
        return "''";
      },
      onSearch: function onSearch() {
        return "''";
      },
      onClear: function onClear() {
        return "''";
      },
      placeholder: '',
      value: ''
    };

    var _render3 = (0, _react3.render)(_react2.default.createElement(_index2.default, {
      input: input,
      options: options
    })),
        asFragment = _render3.asFragment;

    var result = asFragment();
    expect(result).toMatchSnapshot();
  });
  it('should render with a regular size bar when prop is absent', function () {
    var options = {
      onSelect: function onSelect() {
        return "''";
      },
      loading: false,
      value: []
    };
    var input = {
      onChange: function onChange() {
        return "''";
      },
      onSearch: function onSearch() {
        return "''";
      },
      onClear: function onClear() {
        return "''";
      },
      placeholder: '',
      value: ''
    };

    var _render4 = (0, _react3.render)(_react2.default.createElement(_index2.default, {
      input: input,
      options: options
    })),
        asFragment = _render4.asFragment;

    var result = asFragment();
    expect(result).toMatchSnapshot();
  });
  it('should render a regular version of search bar if size prop isnt small, regular or large', function () {
    var options = {
      onSelect: function onSelect() {
        return "''";
      },
      loading: false,
      value: [],
      size: 'medium'
    };
    var input = {
      onChange: function onChange() {
        return "''";
      },
      onSearch: function onSearch() {
        return "''";
      },
      onClear: function onClear() {
        return "''";
      },
      placeholder: '',
      value: ''
    };

    var _render5 = (0, _react3.render)(_react2.default.createElement(_index2.default, {
      input: input,
      options: options
    })),
        asFragment = _render5.asFragment;

    var result = asFragment();
    expect(result).toMatchSnapshot();
  });
});
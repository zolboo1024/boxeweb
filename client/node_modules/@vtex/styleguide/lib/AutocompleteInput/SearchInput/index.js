"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Search = require("../../icon/Search");

var _Search2 = _interopRequireDefault(_Search);

var _Clear = require("../../icon/Clear");

var _Clear2 = _interopRequireDefault(_Clear);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var propTypes = {
  /** Determine if the input's bottom corners should be rounded or not */
  roundedBottom: _propTypes2.default.bool,

  /* Input props */

  /** Input value */
  value: _propTypes2.default.string,

  /** Clear event handler */
  onClear: _propTypes2.default.func,

  /** Change event handler */
  onChange: _propTypes2.default.func,

  /** Search event handler. Called on enter or when clicking the search button */
  onSearch: _propTypes2.default.func,

  /** Focus event handler */
  onFocus: _propTypes2.default.func,

  /** Blur event handler */
  onBlur: _propTypes2.default.func,

  /** Determine if the input and the button should be disabled */
  disabled: _propTypes2.default.bool,

  /** Determine the search bar size */
  size: _propTypes2.default.oneOf(['small', 'regular', 'large']),

  /** Determine if the input and button should be styled with error borders */
  error: _propTypes2.default.bool
};
var defaultProps = {
  roundedBottom: true
};

var SearchInput = function SearchInput(props) {
  var _classNames;

  var onClear = props.onClear,
      onSearch = props.onSearch,
      roundedBottom = props.roundedBottom,
      value = props.value,
      onChange = props.onChange,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      disabled = props.disabled,
      size = props.size,
      error = props.error,
      inputProps = _objectWithoutPropertiesLoose(props, ["onClear", "onSearch", "roundedBottom", "value", "onChange", "onFocus", "onBlur", "disabled", "size", "error"]);

  var _useState = (0, _react.useState)(false),
      focused = _useState[0],
      setFocused = _useState[1];

  var handleChange = function handleChange(e) {
    onChange && onChange(e.target.value);
  };

  var handleClear = function handleClear() {
    onClear && onClear();
  };

  var handleFocus = function handleFocus(e) {
    setFocused(true);
    onFocus && onFocus(e);
  };

  var handleBlur = function handleBlur(e) {
    setFocused(false);
    onBlur && onBlur(e);
  };

  var regularSize = size !== 'small' && size !== 'large';
  var activeClass = (0, _classnames2.default)((_classNames = {
    'b--muted-3': focused && !error,
    'b--muted-4': !focused && !error,
    'b--danger hover-b--danger': error,
    'br--top': !roundedBottom,
    'bg-disabled c-disabled': disabled,
    'bg-base c-on-base': !disabled
  }, _classNames["h-" + size] = !regularSize, _classNames['h-regular'] = regularSize, _classNames));
  var buttonClasses = (0, _classnames2.default)(activeClass, 'bg-base br2 br--right w3 bw1 ba pa0 bl-0', {
    'c-link pointer': !disabled,
    'c-disabled': disabled
  });
  var showClearIcon = onClear && value;
  var inputClasses = (0, _classnames2.default)(activeClass, 'w-100 ma0 border-box bw1 br2 ba outline-0 t-body ph5', {
    'br--left': onSearch,
    pr5: !showClearIcon,
    pr8: showClearIcon
  });
  return _react2.default.createElement("div", {
    className: "flex flex-row"
  }, _react2.default.createElement("div", {
    className: "relative w-100"
  }, _react2.default.createElement("input", _extends({
    className: inputClasses,
    value: value,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onChange: handleChange,
    disabled: disabled
  }, inputProps)), showClearIcon && _react2.default.createElement("span", {
    className: "absolute c-muted-3 fw5 flex items-center pl3 pr5 t-body top-0 right-0 h-100 pointer",
    onClick: handleClear
  }, _react2.default.createElement(_Clear2.default, null))), onSearch && _react2.default.createElement("button", {
    className: buttonClasses,
    disabled: disabled,
    onClick: function onClick() {
      return onSearch(value);
    }
  }, _react2.default.createElement(_Search2.default, {
    size: 16
  })));
};

SearchInput.propTypes = propTypes;
SearchInput.defaultProps = defaultProps;
exports.default = SearchInput;
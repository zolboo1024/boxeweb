{"ast":null,"code":"var _jsxFileName = \"/Users/zz/Projects/React/my-app/client/src/components/CustomNavbar.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Navbar, NavItem, Icon } from 'react-materialize'; //The Link component is a pre-made component imported as a part of the router package.\n//So you can just specify \"to\" prop and then make the button.\n//The router for the front end is different in a sense that they don't really\n//do the same thing. Here, it just makes component bases on what the router says.\n//In the backend, you can make REST requests.\n//But that can only happen in this case where the backend and the frotend are\n//running on different ports.\n//*If there are only one \"port\"(just a )\n\nclass CustomNavbar extends Component {\n  render() {\n    const logoStyle = {\n      width: '64',\n      height: 'auto'\n    };\n    const navbarColor = {\n      'backgroundColor': '#bae567'\n    };\n    return /*#__PURE__*/React.createElement(Navbar, {\n      alignLinks: \"right\",\n      brand: /*#__PURE__*/React.createElement(\"a\", {\n        className: \"brand-logo\",\n        href: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 47\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"img\", {\n        alt: \"the logo\",\n        src: \"/spaces/images/ec60965e53975499cb3b6c1388a1113c.jpg\",\n        style: logoStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 20\n        }\n      })),\n      id: \"mobile-nav\",\n      menuIcon: /*#__PURE__*/React.createElement(Icon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 37\n        }\n      }, \" menu\"),\n      style: navbarColor,\n      options: {\n        draggable: true,\n        edge: 'left',\n        inDuration: 250,\n        onCloseEnd: null,\n        onCloseStart: null,\n        onOpenEnd: null,\n        onOpenStart: null,\n        outDuration: 200,\n        preventScrolling: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavItem, {\n      href: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, \"Spaces\"), this.props.isAuthenticated ? /*#__PURE__*/React.createElement(NavItem, {\n      href: \"/create\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 14\n      }\n    }, \"Create Space Log\") : null, this.props.isAuthenticated ? /*#__PURE__*/React.createElement(NavItem, {\n      href: \"/logout\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 14\n      }\n    }, \"Log out\") : /*#__PURE__*/React.createElement(NavItem, {\n      href: \"/register\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 14\n      }\n    }, \"Register\"), this.props.isAuthenticated ? null : /*#__PURE__*/React.createElement(NavItem, {\n      href: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 14\n      }\n    }, \"Login\"));\n  }\n\n} //MApping state to props means that these values are actually attacked to the\n//state of this component (REgistermodal).\n\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps)(CustomNavbar);","map":{"version":3,"sources":["/Users/zz/Projects/React/my-app/client/src/components/CustomNavbar.js"],"names":["React","Component","connect","Navbar","NavItem","Icon","CustomNavbar","render","logoStyle","width","height","navbarColor","draggable","edge","inDuration","onCloseEnd","onCloseStart","onOpenEnd","onOpenStart","outDuration","preventScrolling","props","isAuthenticated","mapStateToProps","state","auth"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,MAAR,EAAgBC,OAAhB,EAAyBC,IAAzB,QAAoC,mBAApC,C,CACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AACnCM,EAAAA,MAAM,GAAG;AACP,UAAMC,SAAS,GAAG;AAChBC,MAAAA,KAAK,EAAE,IADS;AAEhBC,MAAAA,MAAM,EAAE;AAFQ,KAAlB;AAIA,UAAMC,WAAW,GAAG;AAClB,yBAAmB;AADD,KAApB;AAGA,wBAAQ,oBAAC,MAAD;AAAQ,MAAA,UAAU,EAAC,OAAnB;AAA2B,MAAA,KAAK,eAAE;AAAG,QAAA,SAAS,EAAG,YAAf;AACxC,QAAA,IAAI,EAAG,GADiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAC3B;AAAK,QAAA,GAAG,EAAC,UAAT;AAAoB,QAAA,GAAG,EAAC,qDAAxB;AAA8E,QAAA,KAAK,EAAEH,SAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD2B,CAAlC;AAEF,MAAA,EAAE,EAAC,YAFD;AAEc,MAAA,QAAQ,eAAE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFxB;AAE4C,MAAA,KAAK,EAAEG,WAFnD;AAEgE,MAAA,OAAO,EAAE;AAC7EC,QAAAA,SAAS,EAAE,IADkE;AAE7EC,QAAAA,IAAI,EAAE,MAFuE;AAG7EC,QAAAA,UAAU,EAAE,GAHiE;AAI7EC,QAAAA,UAAU,EAAE,IAJiE;AAK7EC,QAAAA,YAAY,EAAE,IAL+D;AAM7EC,QAAAA,SAAS,EAAE,IANkE;AAO7EC,QAAAA,WAAW,EAAE,IAPgE;AAQ7EC,QAAAA,WAAW,EAAE,GARgE;AAS7EC,QAAAA,gBAAgB,EAAE;AAT2D,OAFzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAaN,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbM,EAiBJ,KAAKC,KAAL,CAAWC,eAAX,gBACK,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADL,GAII,IArBA,EAwBJ,KAAKD,KAAL,CAAWC,eAAX,gBACK,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADL,gBAIK,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA5BD,EAiCJ,KAAKD,KAAL,CAAWC,eAAX,GACI,IADJ,gBAEK,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAnCD,CAAR;AAwCD;;AAjDkC,C,CAmDrC;AACA;;;AACA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAACF,EAAAA,eAAe,EAAEE,KAAK,CAACC,IAAN,CAAWH;AAA7B,CAAL,CAA7B;;AAEA,eAAepB,OAAO,CAACqB,eAAD,CAAP,CAAyBjB,YAAzB,CAAf","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Navbar, NavItem, Icon} from 'react-materialize';\n//The Link component is a pre-made component imported as a part of the router package.\n//So you can just specify \"to\" prop and then make the button.\n\n//The router for the front end is different in a sense that they don't really\n//do the same thing. Here, it just makes component bases on what the router says.\n//In the backend, you can make REST requests.\n//But that can only happen in this case where the backend and the frotend are\n//running on different ports.\n//*If there are only one \"port\"(just a )\nclass CustomNavbar extends Component {\n  render() {\n    const logoStyle = {\n      width: '64',\n      height: 'auto'\n    }\n    const navbarColor = {\n      'backgroundColor': '#bae567'\n    }\n    return (<Navbar alignLinks=\"right\" brand={<a className = \"brand-logo\"\n      href = \"/\" > <img alt=\"the logo\" src=\"/spaces/images/ec60965e53975499cb3b6c1388a1113c.jpg\" style={logoStyle}/>\n    </a>} id=\"mobile-nav\" menuIcon={<Icon> menu</Icon>} style={navbarColor} options={{\n        draggable: true,\n        edge: 'left',\n        inDuration: 250,\n        onCloseEnd: null,\n        onCloseStart: null,\n        onOpenEnd: null,\n        onOpenStart: null,\n        outDuration: 200,\n        preventScrolling: true\n      }}>\n      <NavItem href=\"/\">\n        Spaces\n      </NavItem>\n      {\n        this.props.isAuthenticated\n          ? (<NavItem href=\"/create\">\n            Create Space Log\n          </NavItem>)\n          : null\n      }\n      {\n        this.props.isAuthenticated\n          ? (<NavItem href=\"/logout\">\n            Log out\n          </NavItem>)\n          : (<NavItem href=\"/register\">\n            Register\n          </NavItem>)\n      }\n      {\n        this.props.isAuthenticated\n          ? null\n          : (<NavItem href=\"/login\">\n            Login\n          </NavItem>)\n      }\n    </Navbar>);\n  }\n}\n//MApping state to props means that these values are actually attacked to the\n//state of this component (REgistermodal).\nconst mapStateToProps = state => ({isAuthenticated: state.auth.isAuthenticated});\n\nexport default connect(mapStateToProps)(CustomNavbar);\n"]},"metadata":{},"sourceType":"module"}
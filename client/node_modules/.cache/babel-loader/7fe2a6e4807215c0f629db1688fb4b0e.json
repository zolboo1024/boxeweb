{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { clearErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\"; // Check token & load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  //User loading\n  //Dispatch calls this action. Once it reaches the reducer,\n  //it contains nothing in the payload. Just an empty file with a type\n  var action = {\n    type: USER_LOADING\n  };\n  dispatch(action); //Once it gets the user, then it dispatches something that actually\n  //contains something.\n\n  axios.get('http://localhost:3000/login/user/', tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //Register a users\n\nexport const register = ({\n  username,\n  email,\n  password\n}) => (dispatch, getState) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n  console.log(body);\n  axios.post('http://localhost:3000/users/', body, config).then(res => {\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(clearErrors());\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; //Logs out a user\n\nexport const logout = () => (dispatch, getState) => {\n  try {\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (err) {\n    dispatch(returnErrors('Could not log you out', '', 'LOGOUT_FAIL'));\n    dispatch({\n      type: LOGOUT_FAIL\n    });\n  }\n}; //Logs in a user\n\nexport const login = ({\n  email,\n  password\n}) => (dispatch, getState) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  console.log(body);\n  axios.post('http://localhost:3000/login/', body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(clearErrors());\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; //Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from localStorage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application\"\n    }\n  }; //If we find the token, then it takes it and puts it in the\n  //config. Config is what is ultimately made into an HTTP request.\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/zz/Projects/React/my-app/client/src/actions/authActions.js"],"names":["axios","returnErrors","clearErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","action","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","username","email","password","config","headers","body","JSON","stringify","console","log","post","logout","login","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {returnErrors} from './errorActions';\nimport {clearErrors} from './errorActions';\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  LOGOUT_FAIL,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL\n} from \"./types\";\n\n// Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n  //User loading\n  //Dispatch calls this action. Once it reaches the reducer,\n  //it contains nothing in the payload. Just an empty file with a type\n  var action = {\n    type: USER_LOADING\n  };\n  dispatch(action);\n  //Once it gets the user, then it dispatches something that actually\n  //contains something.\n  axios.get('http://localhost:3000/login/user/', tokenConfig(getState)).then(res => {\n    dispatch({type: USER_LOADED, payload: res.data});\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({type: AUTH_ERROR});\n  });\n};\n//Register a users\nexport const register = ({username, email, password}) => (dispatch, getState) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  const body = JSON.stringify({username, email, password});\n  console.log(body)\n  axios.post('http://localhost:3000/users/', body, config).then(res => {\n    dispatch({type: REGISTER_SUCCESS, payload: res.data});\n    dispatch(clearErrors());\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({type: REGISTER_FAIL});\n  });\n}\n\n//Logs out a user\nexport const logout = () => (dispatch, getState) => {\n  try {\n    dispatch({type: LOGOUT_SUCCESS})\n  } catch (err) {\n    dispatch(returnErrors('Could not log you out', '', 'LOGOUT_FAIL'));\n    dispatch({type: LOGOUT_FAIL});\n  }\n}\n\n//Logs in a user\nexport const login = ({email, password}) => (dispatch, getState) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  const body = JSON.stringify({email, password});\n  console.log(body)\n  axios.post('http://localhost:3000/login/', body, config).then(res => {\n    dispatch({type: LOGIN_SUCCESS, payload: res.data})\n    dispatch(clearErrors());\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({type: LOGIN_FAIL});\n  });\n}\n//Setup config/headers and token\nexport const tokenConfig = getState => {\n  // Get token from localStorage\n  const token = getState().auth.token;\n\n  // Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application\"\n    }\n  }\n  //If we find the token, then it takes it and puts it in the\n  //config. Config is what is ultimately made into an HTTP request.\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/zz/Projects/React/my-app/src/components/auth/LoginModal.js\";\nimport React, { Component } from 'react';\nimport { login } from '../../actions/authActions';\nimport { connect } from 'react-redux';\nimport store from '../../store';\nimport { Alert } from 'reactstrap';\nimport { clearErrors } from '../../actions/errorActions';\nimport PropTypes from 'prop-types';\n\nclass LoginModal extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      email: '',\n      password: '',\n      msg: ''\n    };\n  }\n\n  componentDidMount() {\n    const {\n      isAuthenticated\n    } = this.props;\n\n    if (isAuthenticated) {\n      this.props.history.push('/');\n    }\n\n    ;\n    console.log(\"Component mounted\");\n  }\n\n  onChangeEmail(e) {\n    this.setState({\n      email: e.target.value\n    });\n  }\n\n  onChangePassword(e) {\n    this.setState({\n      password: e.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const thisUser = {\n      email: this.state.email,\n      password: this.state.password\n    };\n    console.log(thisUser); //Attempt to create the user. If it is not created properly, we throw an\n    //error and if it is, we save the token in a local storage.\n\n    store.dispatch(login(thisUser));\n  }\n\n  //When the component updates and the reducers throw an error, we save it in the component state.\n  //handling it in better ways.\n  //when the errors get cleared, this component gets updated.\n  componentDidUpdate(prevProps) {\n    const {\n      error\n    } = this.props;\n\n    if (error !== prevProps.error) {\n      //Check for register error\n      if (error.id === 'LOGIN_FAIL') {\n        this.setState({\n          msg: error.msg\n        });\n      } else {\n        this.setState({\n          msg: null\n        });\n      }\n    }\n\n    const {\n      isAuthenticated\n    } = this.props;\n\n    if (isAuthenticated) {\n      this.props.history.push('/');\n    }\n  }\n\n  render() {\n    var logincss = {\n      'margin': '20'\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, this.state.msg ? /*#__PURE__*/React.createElement(Alert, {\n      color: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 14\n      }\n    }, this.state.msg) : null, /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      style: logincss,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, \"Email:\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"email\",\n      required: \"required\",\n      name: \"email\",\n      className: \"form-control\",\n      value: this.state.email,\n      onChange: this.onChangeEmail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, \"Password:\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      className: \"form-control\",\n      value: this.state.password,\n      onChange: this.onChangePassword,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Login\",\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n} //MApping state to props means that these values are actually attacked to the\n//state of this component (REgistermodal).\n\n\nLoginModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  error: PropTypes.object.isRequired,\n  login: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  login,\n  clearErrors\n})(LoginModal);","map":{"version":3,"sources":["/Users/zz/Projects/React/my-app/src/components/auth/LoginModal.js"],"names":["React","Component","login","connect","store","Alert","clearErrors","PropTypes","LoginModal","constructor","props","onChangeEmail","bind","onChangePassword","onSubmit","state","email","password","msg","componentDidMount","isAuthenticated","history","push","console","log","e","setState","target","value","preventDefault","thisUser","dispatch","componentDidUpdate","prevProps","error","id","render","logincss","textAlign","propTypes","bool","object","isRequired","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {login} from '../../actions/authActions';\nimport {connect} from 'react-redux';\nimport store from '../../store';\nimport {Alert} from 'reactstrap';\nimport {clearErrors} from '../../actions/errorActions';\nimport PropTypes from 'prop-types';\n\nclass LoginModal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    this.state = {\n      email: '',\n      password: '',\n      msg: ''\n    }\n  }\n\n  componentDidMount() {\n    const {isAuthenticated} = this.props;\n    if (isAuthenticated) {\n      this.props.history.push('/')\n    };\n    console.log(\"Component mounted\");\n  }\n\n  onChangeEmail(e) {\n    this.setState({email: e.target.value})\n  }\n\n  onChangePassword(e) {\n    this.setState({password: e.target.value})\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    const thisUser = {\n      email: this.state.email,\n      password: this.state.password\n    }\n\n    console.log(thisUser);\n    //Attempt to create the user. If it is not created properly, we throw an\n    //error and if it is, we save the token in a local storage.\n    store.dispatch(login(thisUser));\n  }\n  static propTypes = {\n    isAuthenticated: PropTypes.bool,\n    error: PropTypes.object.isRequired,\n    login: PropTypes.func.isRequired,\n    clearErrors: PropTypes.func.isRequired\n  };\n  //When the component updates and the reducers throw an error, we save it in the component state.\n  //handling it in better ways.\n  //when the errors get cleared, this component gets updated.\n  componentDidUpdate(prevProps) {\n    const {error} = this.props;\n    if (error !== prevProps.error) {\n      //Check for register error\n      if (error.id === 'LOGIN_FAIL') {\n        this.setState({msg: error.msg});\n      } else {\n        this.setState({msg: null});\n      }\n    }\n    const {isAuthenticated} = this.props;\n    if (isAuthenticated) {\n      this.props.history.push('/')\n    }\n  }\n  render() {\n    var logincss = {\n      'margin': '20'\n    };\n    return (<div>\n      {\n        this.state.msg\n          ? (<Alert color=\"danger\">{this.state.msg}</Alert>)\n          : null\n      }\n      <h3 style={{textAlign: \"center\"}}>Login</h3>\n      <form onSubmit={this.onSubmit} style={logincss}>\n        <div className=\"form-group\">\n          <label>Email:\n          </label>\n          <input type=\"email\" required=\"required\" name=\"email\" className=\"form-control\" value={this.state.email} onChange={this.onChangeEmail}/>\n        </div>\n        <div className=\"form-group\">\n          <label>Password:\n          </label>\n          <input type=\"password\" name=\"password\" className=\"form-control\" value={this.state.password} onChange={this.onChangePassword}/>\n        </div>\n        <div className=\"form-group\" style={{textAlign: \"center\"}}>\n          <input type=\"submit\" value=\"Login\" className=\"btn btn-primary\"/>\n        </div>\n      </form>\n    </div>)\n  }\n}\n//MApping state to props means that these values are actually attacked to the\n//state of this component (REgistermodal).\nconst mapStateToProps = state => ({isAuthenticated: state.auth.isAuthenticated, error: state.error});\n\nexport default connect(mapStateToProps, {login, clearErrors})(LoginModal);\n"]},"metadata":{},"sourceType":"module"}
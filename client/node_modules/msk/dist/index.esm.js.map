{"version":3,"file":"index.esm.js","sources":["../index.js"],"sourcesContent":["const DIGIT = \"9\";\nconst ALPHA = \"A\";\nconst ALPHANUM = \"S\";\nconst ALL = \"*\";\n\nfunction msk(value, mask) {\n  const removeExceedingChars =\n    arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!value || !mask) return \"\";\n  value = value.toString();\n\n  for (var i = 0; i < value.length; i++) {\n    const maskToken = mask[i];\n    // If the character is OK with the mask\n    if (maskToken && match(value[i], maskToken)) {\n      continue;\n    }\n\n    // If it's there's a space or a non-word character in the mask\n    // just insert the character inbetween the value\n    if (isSpaceOrNonWordChar(maskToken)) {\n      const firstPart = value.slice(0, i);\n      const secondPart = trimLeft(value.slice(i));\n      value = firstPart + maskToken + secondPart;\n      value = msk(value, mask, removeExceedingChars);\n      break;\n    }\n\n    if (removeExceedingChars) {\n      // If it doesn't match, remove the character\n      const firstPart = value.slice(0, i);\n      const secondPart = value.slice(i + 1);\n      value = firstPart + secondPart;\n      value = msk(value, mask, removeExceedingChars);\n    }\n  }\n\n  return value;\n}\n\nfunction fit(value, mask) {\n  return msk(value, mask, true);\n}\n\nfunction match(char, token) {\n  switch (token) {\n    case DIGIT:\n      return /[0-9]/.test(char);\n    case ALPHA:\n      return /[A-ú]/.test(char);\n    case ALPHANUM:\n      return /[A-ú0-9]/.test(char);\n    case ALL:\n      return true;\n    default:\n      return new RegExp(escapeRegExp(token)).test(char);\n  }\n}\n\nfunction isSpaceOrNonWordChar(maskToken) {\n  return maskToken === \" \" || new RegExp(/\\W/).test(maskToken);\n}\n\nfunction trimLeft(str) {\n  return str.replace(/^\\s+/, \"\");\n}\n\nfunction escapeRegExp(text) {\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n\nmodule.exports = msk;\nmodule.exports.fit = fit;\n"],"names":["DIGIT","ALPHA","ALPHANUM","ALL","msk","value","mask","removeExceedingChars","arguments","length","undefined","toString","i","maskToken","match","isSpaceOrNonWordChar","firstPart","slice","secondPart","trimLeft","fit","char","token","test","RegExp","escapeRegExp","str","replace","text","module"],"mappings":"AAAA,IAAMA,QAAQ,GAAd;AACA,IAAMC,QAAQ,GAAd;AACA,IAAMC,WAAW,GAAjB;AACA,IAAMC,MAAM,GAAZ;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoBC,IAApB,EAA0B;MAClBC,uBACJC,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,KADtE;;MAGI,CAACH,KAAD,IAAU,CAACC,IAAf,EAAqB,OAAO,EAAP;UACbD,MAAMM,QAAN,EAAR;;OAEK,IAAIC,IAAI,CAAb,EAAgBA,IAAIP,MAAMI,MAA1B,EAAkCG,GAAlC,EAAuC;QAC/BC,YAAYP,KAAKM,CAAL,CAAlB;;QAEIC,aAAaC,MAAMT,MAAMO,CAAN,CAAN,EAAgBC,SAAhB,CAAjB,EAA6C;;;;;;QAMzCE,qBAAqBF,SAArB,CAAJ,EAAqC;UAC7BG,YAAYX,MAAMY,KAAN,CAAY,CAAZ,EAAeL,CAAf,CAAlB;UACMM,aAAaC,SAASd,MAAMY,KAAN,CAAYL,CAAZ,CAAT,CAAnB;cACQI,YAAYH,SAAZ,GAAwBK,UAAhC;cACQd,IAAIC,KAAJ,EAAWC,IAAX,EAAiBC,oBAAjB,CAAR;;;;QAIEA,oBAAJ,EAA0B;;UAElBS,aAAYX,MAAMY,KAAN,CAAY,CAAZ,EAAeL,CAAf,CAAlB;UACMM,cAAab,MAAMY,KAAN,CAAYL,IAAI,CAAhB,CAAnB;cACQI,aAAYE,WAApB;cACQd,IAAIC,KAAJ,EAAWC,IAAX,EAAiBC,oBAAjB,CAAR;;;;SAIGF,KAAP;;;AAGF,SAASe,GAAT,CAAaf,KAAb,EAAoBC,IAApB,EAA0B;SACjBF,IAAIC,KAAJ,EAAWC,IAAX,EAAiB,IAAjB,CAAP;;;AAGF,SAASQ,KAAT,CAAeO,IAAf,EAAqBC,KAArB,EAA4B;UAClBA,KAAR;SACOtB,KAAL;sBACiBuB,IAAR,CAAaF,IAAb;;SACJpB,KAAL;sBACiBsB,IAAR,CAAaF,IAAb;;SACJnB,QAAL;yBACoBqB,IAAX,CAAgBF,IAAhB;;SACJlB,GAAL;aACS,IAAP;;aAEO,IAAIqB,MAAJ,CAAWC,aAAaH,KAAb,CAAX,EAAgCC,IAAhC,CAAqCF,IAArC,CAAP;;;;AAIN,SAASN,oBAAT,CAA8BF,SAA9B,EAAyC;SAChCA,cAAc,GAAd,IAAqB,IAAIW,MAAJ,CAAW,IAAX,EAAiBD,IAAjB,CAAsBV,SAAtB,CAA5B;;;AAGF,SAASM,QAAT,CAAkBO,GAAlB,EAAuB;SACdA,IAAIC,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAP;;;AAGF,SAASF,YAAT,CAAsBG,IAAtB,EAA4B;SACnBA,KAAKD,OAAL,CAAa,0BAAb,EAAyC,MAAzC,CAAP;;;AAGFE,SAAA,GAAiBzB,GAAjB;AACAyB,SAAA,GAAqBT,GAArB;;;;;;"}
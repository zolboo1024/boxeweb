{"version":3,"file":"index.umd.js","sources":["../index.js"],"sourcesContent":["const DIGIT = \"9\";\nconst ALPHA = \"A\";\nconst ALPHANUM = \"S\";\nconst ALL = \"*\";\n\nfunction msk(value, mask) {\n  const removeExceedingChars =\n    arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!value || !mask) return \"\";\n  value = value.toString();\n\n  for (var i = 0; i < value.length; i++) {\n    const maskToken = mask[i];\n    // If the character is OK with the mask\n    if (maskToken && match(value[i], maskToken)) {\n      continue;\n    }\n\n    // If it's there's a space or a non-word character in the mask\n    // just insert the character inbetween the value\n    if (isSpaceOrNonWordChar(maskToken)) {\n      const firstPart = value.slice(0, i);\n      const secondPart = trimLeft(value.slice(i));\n      value = firstPart + maskToken + secondPart;\n      value = msk(value, mask, removeExceedingChars);\n      break;\n    }\n\n    if (removeExceedingChars) {\n      // If it doesn't match, remove the character\n      const firstPart = value.slice(0, i);\n      const secondPart = value.slice(i + 1);\n      value = firstPart + secondPart;\n      value = msk(value, mask, removeExceedingChars);\n    }\n  }\n\n  return value;\n}\n\nfunction fit(value, mask) {\n  return msk(value, mask, true);\n}\n\nfunction match(char, token) {\n  switch (token) {\n    case DIGIT:\n      return /[0-9]/.test(char);\n    case ALPHA:\n      return /[A-ú]/.test(char);\n    case ALPHANUM:\n      return /[A-ú0-9]/.test(char);\n    case ALL:\n      return true;\n    default:\n      return new RegExp(escapeRegExp(token)).test(char);\n  }\n}\n\nfunction isSpaceOrNonWordChar(maskToken) {\n  return maskToken === \" \" || new RegExp(/\\W/).test(maskToken);\n}\n\nfunction trimLeft(str) {\n  return str.replace(/^\\s+/, \"\");\n}\n\nfunction escapeRegExp(text) {\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n\nmodule.exports = msk;\nmodule.exports.fit = fit;\n"],"names":["DIGIT","ALPHA","ALPHANUM","ALL","msk","value","mask","maskToken","removeExceedingChars","arguments","length","undefined","toString","i","match","RegExp","test","slice","replace","char","token","text","module"],"mappings":"sLAAA,IAAMA,EAAQ,IACRC,EAAQ,IACRC,EAAW,IACXC,EAAM,IAEZ,SAASC,EAAIC,EAAOC,OAuDUC,EAtDtBC,EACe,EAAnBC,UAAUC,aAA+BC,IAAjBF,UAAU,IAAmBA,UAAU,OAE5DJ,IAAUC,EAAM,MAAO,KACpBD,EAAMO,eAET,IAAIC,EAAI,EAAGA,EAAIR,EAAMK,OAAQG,IAAK,KAC/BN,EAAYD,EAAKO,OAEnBN,IAAaO,EAAMT,EAAMQ,GAAIN,OA8Cd,OADOA,EAvCDA,IAwCC,IAAIQ,OAAO,MAAMC,KAAKT,GAxCX,GAI3BH,IAHUC,EAAMY,MAAM,EAAGJ,GAEbN,EADQF,EAAMY,MAAMJ,GA0CjCK,QAAQ,OAAQ,IAxCJZ,EAAME,YAIvBA,IAKMJ,IAHUC,EAAMY,MAAM,EAAGJ,GACdR,EAAMY,MAAMJ,EAAI,GAEhBP,EAAME,WAItBH,EAOT,SAASS,EAAMK,EAAMC,UACXA,QACDpB,gBACYgB,KAAKG,QACjBlB,gBACYe,KAAKG,QACjBjB,mBACec,KAAKG,QACpBhB,SACI,iBAEA,IAAIY,QAYKM,EAZeD,EAa5BC,EAAKH,QAAQ,2BAA4B,UAbLF,KAAKG,GAYlD,IAAsBE,EAItBC,MAAiBlB,IA/BjB,SAAaC,EAAOC,UACXF,EAAIC,EAAOC,GAAM"}